SetLangMode(LangEnglish,"ENG",0);

window PY_SettingsTClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  Integer tilenr;

  WindowBegin("Amoralle - Settings",PY_SettingsTClass,CGSbl,-);
  SetWRect(64,80,700,580);
  SetBlid(PY_SettingsBlock);
  vs = 20;
  Tile(0,50,false,"",-);
  TileButton(1,"Varieties");
  //TileButton(2,"");   
  Tile(1,110,true,"1",PY_ColVAR);
  EditField(h=300,v=6,50,"Colour Variety Type",Normal,PY_ColVAR,false,VARGSClass);//payout-21; edz
  EditField(h=300,v+=vs,50,"Quotation variety language",Normal,PY_VARLang,false,LangSClass);//payout-21; edz
  //Tile(2,90,true,"2",-);  
  EndWindow;
  
  return;
end;

window SwedBankImportSTIClass:1// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 17 April 2018 18:01:52
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real f,h,v,vm,vs;

  WindowBegin("SwedBank import Statement ",SwedBankImportSTIClass,CGIcW,RcType); 
  SetWRect(20,80,480,200);
  h = 70;
  v = 40;
  vs = 20;
  StaticText(h,v+=vs,"Import: SwedBank Bank To Customer Statement",false);
  StaticText(h,v+=vs,"File format: XML",false);
  StaticText(h,v+=vs,"Based on: Bank To Customer Statement V02 camt.053.001.02",false);

  EndWindow;
  return;
end;


window SwedbankImportLClass:1// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 18 April 2018 10:00:30
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Swedbank Imports",SwedbankImportLClass,CGmlist,-);
  SetWRect(20,80,1200,355);
  Sizeable(-1,-1,0,0);
  SpawnClass(SwedbankImportDClass);
  UseView(SwedbankImportVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,1,"NtryRef",NtryRef,false,NtryRef);
  RlCol(140,140,"BankID",BankID,false);
  RlCol(210,210,"OwnID",OwnID,false);
  RlColKey(280,280,"Date",BookgDt,false,BookgDt);
  RlCol(350,350,"IBAN",IBAN,false);
  RlCol(460,460,"Name",RecName,false);
  RlCol(660,660,"Cmt",Ustrd,false);
  RlColKey(-180,-180,"D/C",CdtDbtInd,false,CdtDbtInd);
  RlCol(-130,-130,"AmtCcy",AmtCcy,false);
  RlCol(-60,-60,"Curncy",CurncyCode,true);
  SearchField("Search");
  EndWindow;
end;

window SwedbankImportDClass:1// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 18 April 2018 10:00:30
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real f,h,v,vm,vs;
	
  WindowBegin("Swedbank Imports",SwedbankImportDClass,CGview,-);
  SetWRect(20,80,250,250);
  Sizeable(-1,-1,0,0);
  UseView(SwedbankImportVc);
  
  vs = 20;
  EditField(h=100,v=30,150,"NtryRef",ViewOnly,NtryRef,false,0);
  EditField(h=100,v+=vs,150,"BankID",ViewOnly,BankID,false,0);
  EditField(h=100,v+=vs,150,"OwnID",ViewOnly,OwnID,false,0);
  EditField(h=100,v+=vs,150,"Date",ViewOnly,BookgDt,false,0);
  EditField(h=100,v+=vs,150,"IBAN",ViewOnly,IBAN,false,0);
  EditField(h=100,v+=vs,-20,"Name",ViewOnly,RecName,false,0);
  EditField(h=100,v+=vs,-20,"Comment",ViewOnly,Ustrd,false,0);
  EditField(h=100,v+=vs,150,"D/C",ViewOnly,CdtDbtInd,false,0);
  EditField(h=100,v+=vs,150,"Ammount",ViewOnly,AmtCcy,false,0);
  EditField(h=100,v+=vs,150,"Curncy",ViewOnly,CurncyCode,false,0); 
  
  SearchField("Search");
  EndWindow;
  
end;  
  window DOLShopifyTClass:1// Edit ************************** BPI Ukraine - KramarAlexandr - Monday, 23 April 2018 15:37:58
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
	real h,v,vm,vs;
	v = 6; vs = 20; h = 90;

	WindowBegin("Amoralle - Shopify Settings",DOLShopifyTClass,CGSbl,ItemSettingType);
  SetWRect(20,80,700,480);
  SetBlid(DOLShopifyBlock);
  Sizeable(-1,-1,0,0);
  Tile(0,20,false,"",APIUser);
  TileButton(1,"API Access");
  TileButton(2,"Automatic Sync (SERP -> Shopify)");
  TileButton(3,"Automatic Sync (Shopify -> SERP)");
  TileButton(4,"Special options");
  Tile(1,120,true,"",APIUser);
  EditField(h,v = 10,-20,"API Key",Normal,APIUser,false,0);
  EditField(h,v += vs,-20,"API Password",Normal,APIPass,false,0);
  EditField(h,v += vs,200,"Shopify URL",Normal,ShopifyURL,false,0);
  EditField(h,v += vs,80,"Shopify Port",Normal,ShopifyPort,true,0);
  Tile(2,120,true,"",UpdStockInertval);
  //CheckBox(h,v=20,0,"Update Items (!for testing only!) (restart required)",UpdItems);
  ButtonFrame(h,v+=30,270,5,"");
  CheckBox(h,v+=1,0,"Update Stock Levels (restart required)",UpdStock);
  //EditField(h+100,v+=vs,60,"Every",Normal,UpdStockInertval,false,0);
  //StaticText(h+155,v+10,"minutes",false);
  EditField(h+100,v+=vs,60,"Location class",Normal,StockClass,false,LocClSClass);
  //EditField(h+100,v+=vs,60,"Inch variety group",Normal,InchVARGCode,false,VARGSClass);
  ButtonFrame(h,v+=50,270,2,"Effective immediately");
  CheckBox(h,v+=1,0,"Update Stock Levels when Stock level Changes",UpdStockAlways);
  //CheckBox(h,v+=20,0,"Update Price When Item is Updated",UpdPriceAlways); // EVS: DOL-167
  EndFrame;
  Tile(3,120,true,"",SaveReqResp);
  h=h+50;
  EditField(h,v = 10,80,"Def. customer",Normal,DefWebUserCode,false,CUSClass);
  EditField(h,v += vs,80,"Def. Location",Normal,DefWebLocation,false,LocationSClass);
  EditField(h,v += vs,80,"Def. Order Class",Normal,DefWebOrdClass,false,OrderClassSClass);
  EditField(h,v += vs,80,"Shopify Location Id",Normal,ShpifyLocId,false,ShopifyLocSClass);
  Tile(4,120,true,"",SaveReqResp);
  StaticText(h,v=20,"NOTE: Do not change anything unless insctructed",false);
  CheckBox(h,v+=20,0,"Save request and response data",SaveReqResp);
  SpecialMenu("Send Stock Levels Once",' ',0,"DOLShopifySendStockSm");
	EndWindow;

end;
