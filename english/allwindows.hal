external inner procedure SetupColumWithKeypadWindow(var real,var real,var real,var real,var real,var real,var real);
external inner function Integer POSFontSize();
external inner function string 255 F_Label(string);
external inner procedure SplitButton(LongInt,LongInt,LongInt,LongInt,LongInt,string,string,string,string,LongInt);
external inner procedure POSKeyPad(LongInt,LongInt,LongInt,LongInt,LongInt,string,LongInt);
external inner function string 255 GetChangePaswordLink();
remote inner function UUID GetServerUUIDRemote();
external inner function string 255 RemainingEinvoicesQuantity;
external inner function Boolean DisplayAdditionalFields();
remote inner function Integer MailAcceptanceStatus(LongInt);
external inner function Boolean IsMoveToCloud(record SetupStatusBlock);
external inner function Boolean IsMoveToCloudB();
external outer function Boolean IsCloudControllerClient();
external inner function string 255 GetCurrentStoreName();
external inner function Boolean CompaniesInClientMode();
external inner function Boolean ProductInDemoMode();
remote inner function string 255 GetCompanyShortCode(string);
external inner function Boolean AnyModuleAvailable();
external inner function Boolean AcceptanceStatusColumnTest(string);
external inner function Integer FlipCharCode(Integer,Integer);
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner function boolean AddBicToMasterWindow(integer,var real,var real,real,real,real,real);
external inner function Boolean IsIntEnabActive(var string,var string,var Boolean,var string);
external inner function Boolean TouchScreenLookVertical();
external inner procedure SysEClass_Tool(Integer,var real,var real);
external inner procedure GTransEClass_Tool(Integer,var real,var real);
external inner procedure GTrans2EClass_Tool(Integer,var real,var real,var real);
external inner procedure GBaseEClass_Tool(Integer,var real,var real);
external inner procedure TransGenVClass_Tool(Integer,var real,var real);
external inner procedure GetCurUser(var record UserVc);
external inner function string 60 UserDefined(string,string);
external inner function string 60 RestPMCashModePayMode();
external outer function string 255 MasterBannerURL();
external inner procedure ItemStatusUserSettings(string,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean);
external inner function Boolean AllowedInCountry(integer);
external inner function Integer ResourceWindowResourceType();
external inner function Boolean ResPlan_Rental();
external inner function Boolean ResPlan_ProdOperations();
external inner function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc);
external inner function Boolean ReadNPTSWindowData(string,string,longint,string,string,Date,Time,var Boolean,var string,var string,var string,var record POSButtonsVc);
external inner function Boolean TouchScreenLook();
external inner procedure ExtractObj(string,var Integer,var string);
external inner function Boolean IsSessionOpen(string,string,Date,Time);
external inner procedure CntNPTSPaymentCurrencies(var Array string,var Array string,var Array Integer,var Array string,var Integer);
remote inner procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external inner function Boolean CheckOffLineRecords(Boolean);
external inner function string 60 TileUserDefined(string,Integer,var Integer);
external inner function Boolean CUVATNrColumn;
external inner function Integer GetInternetEnablerCountry();
external inner function Integer CntVarietyCode(Integer,var Array string);
external inner function Integer VarietyMatMax(Integer);
external inner function Boolean UseTaxTemplatesforTaxCalc();
remote inner procedure TablesViewWClassDo(record LocalMachineBlock,string,Array string,Array string,Array string,Array string,Array Integer,var Integer,var LongInt);
external inner function string 20 GetMenuCode(string);
external inner procedure DrawModifierButtons(var Integer);
remote inner procedure ForkLiftQueueArray(string,string,var Array string,var Array string,var Array string,var Array string,var Array val,var Array Integer,var Array string,var Integer,Boolean,LongInt,LongInt,string);

external inner function Boolean DisplayLoginButtons();
external inner function Integer LoginShortcutsLines(Integer);
external inner function Integer LoginShortcutsPos(Real,Integer);

external inner procedure DefineTTRRowTypes(Integer);
external inner function real ItemButtons(string,Integer);
external inner procedure HWStoreWClassAddProducts(Integer);
external inner function Boolean HasYodlee();
external inner function Boolean HasAvalara();
external inner function Boolean HasCharts();
external inner function Boolean HasDetailedCharts();
external inner function Boolean HasNewRegistration();
external inner function Boolean ActivityIsForAcceptanceOrFYI(record ActVc,Boolean,Boolean);
// TravelLog
external inner function Integer LoginShortcuts();
external inner function Boolean TestConfigurationEnabler(string);
remote inner function Integer CustomerSalesPaymentTermType(string);
// POS Standalone
external inner function Boolean DefCustCodeSetup();
// in-apps
external inner function Boolean HasInAppsAvailable();
external inner function Integer CountCountries();

// Language functions ENG
external inner function Boolean DisplayLoginKeyPad_ENG();
external inner function string 255 VATZoneEditFieldLabel_ENG(Integer);
external inner function real VATZoneButtonsLabelsENG(real,real,real,real);
external inner procedure LoginButtons2_ENG(Real,Real);
external inner procedure FORMDEF_ENG();
external inner function string 255 DemoMsgWClassTitle_ENG(Boolean,Boolean);
external inner procedure TBEClassDef_ENG();
external inner function string 255 VATZoneNameENG();
external inner procedure TSERW_ENG();
external inner procedure TSERWNT_ENG();
external inner procedure TSERWTouch_ENG();
external inner procedure TSERWTEST_ENG();
external inner procedure INVFORM_ENG(Boolean);
external inner procedure DisplayRecordDetails_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface2_ENG(string,string,record POSButtonsVc,string,Integer,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ENG();
external inner function string 255 ResMonWClassWindowTitle_ENG();
external inner function string 255 RTMonWClassWindowTitle_ENG();
external inner procedure SetupNightAuditWindowControls_ENG(Boolean);
external inner procedure CURClassDefinitionENG();
external inner function real DrawPaymentModesButtons_IV_ENG(real);
external inner function real FunctionButtons_ENG(string);
external inner procedure CreditCardWindowHeader_ENG(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ENG(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ENG(Real);
external inner procedure CreditCardWindowDeliveryDetail_ENG(Real);
external inner function real DrawPaymentModesButtons_ENG();
external inner procedure DrawBarMenuTiles_ENG(string);
external inner procedure DrawRestPMOtherPay_ENG();
external inner procedure DisplayRecordDetailsRA_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ENG(var integer,var integer);
external inner procedure OKCancel_ENG();
external inner procedure DefineElearningURLCacheLClass_ENG();
external inner procedure DefineElearningURLCacheDClass_ENG();
external inner function real TravelLogDeductions_ENG(real,real);
external inner procedure LoginButtons_ENG(Real);
external inner procedure FORMDEF2_ENG();
external inner procedure FORMDEF3_ENG();
external inner procedure ARS2RClass_ENG();
external inner procedure ALLVATRClass_ENG();

external inner function Boolean IsStandardUnused();
external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();
external inner function Boolean HasATOL();

external inner function Boolean HasAccPeriods();
external inner function Boolean HasAccessGroups();
external inner function Boolean HasAddFee();
external inner function Boolean HasApprovals();
external inner function Boolean HasCCPayments();
external inner function Boolean HasAdvancedAccounting();
external inner function Boolean HasAdvancedCRM();
external inner function Boolean HasAdvancedPricing();
external inner function Boolean HasAdvancedProduction();
external inner function Boolean HasAdvancedStock();
external inner function Boolean HasAged();
external inner function Boolean HasBar();
external inner function Boolean HasBase2();
external inner function Boolean HasBranch();
external inner function Boolean HasBuyBack();
external inner function Boolean HasCategories();
//external inner function Boolean HasConsigmentStock();
external inner function Boolean HasCommunicator();
external inner function Boolean HasConsignmentStock();
external inner function Boolean HasContactClassification();
external inner function Boolean HasContactRelations();
external inner function Boolean HasConsolidation();
external inner function Boolean HasCountryPerCustomer();
external inner function Boolean HasCreditLimit();
external inner function Boolean HasCustItem();
external inner function Boolean HasCustomerSearchKey();
external inner function Boolean HasCustomerStatusReport();
external inner function Boolean HasDownpayments();
external inner function Boolean HasDefineColumns();
external inner function Boolean HasDeliveryAddress();
external inner function Boolean HasDepartments();
external inner function Boolean HasETaxDocuments();
external inner function Boolean HasEInvoicing();
external inner function Boolean HasEndorsedChecks();
external inner function Boolean HasExtraNLComment();
external inner function Boolean HasExtTax();
external inner function Boolean HasFavouriteActTypes();
external inner function Boolean HasFiscalPrinter();
external inner function Boolean HasFormEditor();
external inner function Boolean HasFreightAdvanced();
external inner function Boolean HasHideCostPrice();
external inner function Boolean HasHotelInterface();
external inner function Boolean HasGuestUserDefined();
external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasIncomeAndExpenseBook();
external inner function Boolean HasIOUChecks();
external inner function Boolean HasItemClassification();
external inner function Boolean HasItemGroups();
external inner function Boolean HasKPIs();
external inner function Boolean HasLanguages();
external inner function Boolean HasLimitedAccess();
external inner function Boolean HasLocalMachines();
external inner function Boolean HasLoyaltyCards();
external inner function Boolean HasMailTags();
external inner function Boolean HasMainPartner();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasNLBudget();
external inner function Boolean HasNLBudgetClass();
external inner function Boolean HasObjects();
external inner function Boolean HasInvoiceOfficialSerNr();
external inner function Boolean HasOfficialSerNr();
external inner function Boolean HasOrderClasses();
external inner function Boolean HasPreferedOfficialSerNr();
external inner function Boolean HasNumberSeries();
external inner function Boolean HasPersons();
external inner function Boolean HasPocketScreen();
external inner function Boolean HasPositions();
external inner function Boolean HasPrepayments();
external inner function Boolean HasProjects();//very strange tag
external inner function Boolean HasPriceLists();
external inner function Boolean HasQualityControl();
external inner function Boolean HasReconLevel2();
external inner function Boolean HasReminderLevel();
external inner function Boolean HasRemoteBackup();
external inner function Boolean HasResourceDisplayGroups();
external inner function Boolean HasRussianPrepayment();
external inner function Boolean HasRetGoodsToSupp();
external inner function Boolean HasReturnedGoods();
external inner function Boolean HasRoomPackages();
external inner function Boolean HasRoomTypes();
external inner function Boolean HasRoute();
external inner function Boolean HasSalesman();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasSecondQuantity();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasServerInCloud();
external inner function Boolean HasSettlementDiscount();
external inner function Boolean HasSimulations();
external inner function Boolean hasSimAccruals();
external inner function Boolean HasSkypeConnection();
external inner function Boolean HasSIPServerConnection();
external inner function Boolean HasStrAsSignFType();
external inner function Boolean HasTouchScreenDevice();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasTestFeatures();
external inner function Boolean HasMetroTestFeatures();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasThrouLocation();
external inner function Boolean HasTouchScreenLook();
external inner function Boolean HasTREO();
external inner function Boolean HasVarieties();
external inner function Boolean HasVATZone();
external inner function Boolean HasWithholdingTax();
external inner function Boolean HasWithholdingTaxAdvanced();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasWorkflowOverview();

external inner function Boolean HasStandardCRM();
external inner function Boolean HasStandardOrganizer();
external inner function Boolean HasStandardCommunicator();

external inner function Boolean HasEMail();
external inner function Boolean HasExternalEMail();

external inner function Boolean HasModAT2();
external inner function Boolean HasModBA();
external inner function Boolean HasModCheck();
external inner function Boolean HasModCL();
external inner function Boolean HasModCO();
external inner function Boolean HasModCons();
external inner function Boolean HasModCourses();
external inner function Boolean HasModCredMan();
external inner function Boolean HasModCRM();
external inner function Boolean HasModEDI();
external inner function Boolean HasModExp();
external inner function Boolean HasModHotel();
external inner function Boolean HasModHRM();
external inner function Boolean HasModIN();
external inner function Boolean HasModIntStock();
external inner function Boolean HasModNL();
external inner function Boolean HasPaymentGateway();
external inner function Boolean HasModPO();
external inner function Boolean HasModPOS();
external inner function Boolean HasModPL();
external inner function Boolean HasModPOProg();
external inner function Boolean HasModPP();
external inner function Boolean HasModProd();
external inner function Boolean HasModQT();
external inner function Boolean HasModRent();
external inner function Boolean HasModRest();
external inner function Boolean HasModRsrt();
external inner function Boolean HasModSO();
external inner function Boolean HasModSL();
external inner function Boolean HasModSVO();
external inner function Boolean HasModTS();
external inner function Boolean HasModWHM();
external inner function Boolean HasModDI();
external inner function Boolean UsePostOKButton();
external inner function Boolean HasBankImport();
external inner function Boolean HasPLIntegratedWithNL();
external inner function Boolean HasSLIntegratedWithNL();
external inner function Boolean HasIntegratedNL();
external inner function Boolean HasConsStockMoveInvoices();

window StockMovDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,v,vm,vs;
  Integer tilenr,f,flipnr;

  WindowBegin("#Stock# Movement",StockMovDClass,CGview,-);
  if (HasJewelleryInterface) then begin
    SetWRect(20,80,850,400);
  end else begin
    SetWRect(20,80,700,400);
  end;
  Sizeable(-1,-1,0,0);
  UseView(StockMovVc);
  ActiveFieldOnNew("SentTransDate");
  Tile(0,90,false,"",TransDate);
  v = 6; vs = 20; h = 110; h2 = 300; h3 = 500; h4 = 620;
  EditField(h,v,80, "No.",Normal,SerNr,false,TSerSClass);
  CheckBox(h2,v,0,"Reserved",Reserved);
  EditField(h3,v,80,"Reason",Normal,Reason,false,StandProblemsSClass);
  EditField(h,v+=vs,80,"Ord. Date",Normal,OrdTransDate,false,PasteCurDate);
  if (HasMultiLocations) then begin
    if (IsEnterprise) then begin
      EditField(h2,v,80,"Sent Date",Normal,SentTransDate,false,PasteCurDate);
    end;
  end;
  EditField(h3,v,80,"Received Date",Normal,TransDate,false,PasteCurDate);
  if (HasMultiLocations) then begin
    EditField(h,v+=vs,80, "From Location",Normal,FrLocation,false,LocationSClass);
    if (IsEnterprise) then begin
      EditField(h2,v,80,"Via Location",Normal,ThrouLocation,false,LocationSClass);
    end;
    EditField(h3,v,80,"To Location",Normal,ToLocation,false,LocationSClass);
  end;
  if (HasConsStockMoveInvoices) then begin
    EditField(h,v+=vs,80, "Invoice No.",ViewOnly,InvoiceNr,false,0);
    EditField(h2,v,80,"Invoice Date",ViewOnly,InvDate,false,0);
    //payout-19; edz:
    //if (HasLocalization("PRT")) then begin 
    //  EditField(h3,v,80,"Invoice Official No.",ViewOnly,InvoiceOfficialSerNr,false,0);
    //end;
    //end;   
    EditField(h3,v,80,"Language",Normal,LangCode,false,LangSClass);
    //:edz
  end;
  tilenr = 1;
  if (HasPositions or HasModWHM or HasLocalization("PRT")) then begin
    TileButton(tilenr,"Positions"); tilenr = tilenr + 1;
  end;
  if (HasObjects) then begin
    TileButton(tilenr,"Tags/Objects"); tilenr = tilenr + 1;
  end else begin
    TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Items"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Durations"); tilenr = tilenr + 1;
  TileButton(tilenr,"Freight"); tilenr = tilenr + 1;
  TileButton(tilenr,"Address"); tilenr = tilenr + 1;
  tilenr = 1;
  if (HasPositions or HasModWHM or HasLocalization("PRT")) then begin
    Tile(tilenr,60,false,tilenr,FrPos); tilenr = tilenr + 1;
    v = 6;
    if (HasPositions) then begin
      EditField(h,v,80, "From Position",Normal,FrPos,false,UsedPosSClass);
      EditField(h2,v,80,"To Position",Normal,ToPos,false,FreePosSClass);
    end;
    if (HasModProd) then begin
      EditField(h3,v,80,"For Production",Normal,ProdSerNr,false,ProdSClass); v = v + vs;
      EditField(h3,v,150,"Route",Normal,Sorting,false,DelRouteSClass); v = v + vs;
    end;
    if ((HasLocalization("PRT") and HasModIN and HasMultiLocations) or IsStandardProduct==false) then begin 
      EditField(h3,v,150,"Type",Normal,StockMovType,false,SetSClass); v = v + vs;
    end;
    if (HasModWHM) then begin
      v = 6 + vs;
      CheckBox(h,v,0,"Manual Pick",ManualPick);
      CheckBox(h,v+=16,0,"Send To Forklift Queue",ToForkLiftQue);
    end;
  end;
  Tile(tilenr,70,false,tilenr,Comment); tilenr = tilenr + 1;
  v = 6;
  if (HasObjects) then begin
    EditField(h,v,-20,"Tags/Objects",Normal,Objects,false,ObjSClass);
    v = v + vs;
  end;
  EditField(h,v,-20,"Comment",Normal,Comment,false,0);
  EditField(h,v+=vs,135,"Official Ser. No.",Normal,OfficialSerNr,false,LegalInvNrSClass);
  EnterSkip(Math);
  Tile(tilenr,79,true,tilenr,Math); tilenr = tilenr + 1;
  v = 24;
  MatrixBegin(4,v,-50,-50,-,199);
  Flip(0);
  flipnr = 1;
  if (HasJewelleryInterface) then begin
    MatCol(1,32,"Serial No.",0,SerialNr,false,SerialNrSClass);
    EnterSkip(Quant);
    MatCol(1,130,"Item",0,ArtCode,false,INSClass);
    Flip(flipnr); flipnr = flipnr + 1;
    if (HasVarieties) then begin
      MatCol(1,200,"Req. Qty",0,OrdQuant,true,MATVARINSClass);
    end else begin
      if (HasThrouLocation) then begin
        MatCol(1,200,"Req. Qty",0,OrdQuant,true,0);
      end;
    end;
    if (HasThrouLocation) then begin
      MatCol(1,250,"Sent Qty",0,SentQuant,true,0);
    end;
    MatCol(1,300,"Rcvd. Qty",0,Quant,true,0);
    MatCol(1,350,"Description",0,Spec,false,0);
  end else begin
    MatCol(1,32,"Item",0,ArtCode,false,INSClass);
    Flip(flipnr);  flipnr = flipnr + 1;
    if (HasVarieties) then begin
      MatCol(1,86,"Req. Qty",0,OrdQuant,true,MATVARINSClass);
    end else begin
      if (HasThrouLocation) then begin
        MatCol(1,86,"Req. Qty",0,OrdQuant,true,0);
      end;
    end;
    if (HasThrouLocation) then begin
      MatCol(1,148,"Sent Qty",0,SentQuant,true,0);
    end;
    MatCol(1,210,"Rcvd. Qty",0,Quant,true,0);
    MatCol(1,272,"Description",0,Spec,false,0);
  end;
  MatCol(1,-260,"R. Old Unit Pr.",0,OldPrice,true,0);
  MatCol(1,-160,"R. Extra Cost",0,ExtraSCost,true,0);
  MatCol(1,-80,"R. New Unit Pr.",0,NewPrice,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasVarieties) then begin
    MatCol(1,86,"Req. Qty",0,OrdQuant,true,MATVARINSClass);
  end else begin
    if (HasThrouLocation) then begin
      MatCol(1,86,"Req. Qty",0,OrdQuant,true,0);
    end;
  end;
  if (HasThrouLocation) then begin
    MatCol(1,148,"Sent Qty",0,SentQuant,true,0);
  end;
  MatCol(1,210,"Rcvd. Qty",0,Quant,true,0);
  MatCol(1,272,"Description",0,Spec,false,0);
  MatCol(1,-260,"#S.# Old Unit Pr.",0,SentOldPrice,true,0);
  MatCol(1,-160,"#S.# Extra Cost",0,SentExtraSCost,true,0);
  MatCol(1,-80,"#S.# New Unit Pr.",0,SentNewPrice,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,86,"Description",0,Spec,false,0);
  if (HasObjects) then begin
    MatCol(1,-380,"Tags/Objects",0,Objects,false,ObjSClass);
  end;
  if (HasSerialNumbers) then begin
    MatCol(1,-280,"Serial No.",0,SerialNr,false,SerialNrSClass);
  end;
  MatCol(1,-140,"Base Price",0,BasePrice,true,0);
  MatCol(1,-40,"Coeff",0,Coefficient,false,0);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(1,86,"Description",0,Spec,false,0);
  if (HasSerialNumbers) then begin
    MatCol(1,-280,"Serial No.",0,SerialNr,false,SerialNrSClass);
  end;
  MatCol(1,-180,"Width",0,UnitXval,true,0);
  MatCol(1,-135,"Height",0,UnitYval,true,0);
  MatCol(1,-90,"Depth",0,UnitZval,true,0);
  MatCol(1,-45,"OR Row",0,OrderRowNr,false,0);
  if (HasPositions) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,86,"Description",0,Spec,false,0);
    MatCol(1,-180,"From Position",0,FrPosCode,false,UsedPosSClass);
    MatCol(1,-90,"To Position",0,ToPosCode,false,FreePosSClass);
  end;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusStockMovDsm");
  if (HasQualityControl) then begin
    RowMenuItem(0,"Quality Control",'u','u',0,"QualConFromStockMovDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (HasThrouLocation) then begin
    CheckBox(20,-52,0,"Confirmed",OrdFlag);
    CheckBox(20,-36,0,"Sent",SentOKFlag);
  end;
  CheckBox(20,-20,0,"Received",OKFlag);
  if (HasThrouLocation) then begin
    EditField(170,-20,62,"Sent Qty",Normal,TotSentQty,true,0);
  end;
  EditField(310,-20,62,"Rcvd. Qty",Normal,TotQty,true,0);
  if (HasLocalization("HRV,PRT")) then begin
    EditField(550,-40,150,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
//    SoftEditField(550,-40,150,"Tax Auth. Approval",Normal,"TaxAdminServSeal",false,0,M4Str,200);
  end;
  EditField(550,-20,100,"Non Accounted Extra Costs",Normal,OtherExtraCosts,false,0);
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
    h1 = 110; vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Base Currency",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin  
        EditField(h1,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
      if (HasBase2) then begin  
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);          
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);    
      end;    
    end else begin
      EditField(h1,v+=vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Base Currency 2",Normal,BaseRate2,true,0);
    end;
  end;
  Tile(tilenr,110,false,tilenr,PlanSendDate); tilenr = tilenr + 1;
  vs = 20; h1 = 130; h2 = 330; h3 = 560;
  EditField(h,v=6,80,"Plan. Sent Date",Normal,PlanSendDate,false,PasteCurDate);
  EnterSkip(PlanSendTime);
  if (HasLocalization("PRT")==false or IsStandardProduct==false) then begin 
    EditField(h2,v,40,"Plan. Duration Days",ViewOnly,PlanDurationDays,false,0);
  end;
  EditField(h,v+=vs,80,"Plan. Sent Time",Normal,PlanSendTime,false,PasteCurTime);
  EnterSkip(PlanArrDate);
  if (HasLocalization("PRT")==false or IsStandardProduct==false) then begin 
    EditField(h2,v,80,"Plan. Duration Hours",ViewOnly,PlanDurationTime,false,0);
  end;
  EditField(h3,v=6,80,"Plan. Arrival Date",Normal,PlanArrDate,false,PasteCurDate);
  EditField(h3,v+=vs,80,"Plan. Arrival Time",Normal,PlanArrTime,false,PasteCurTime);
  if (HasLocalization("PRT")==false or IsStandardProduct==false) then begin 
    EditField(h,vm=(v+=32),80,"Actual Sent Date",Normal,ActSendDate,false,PasteCurDate);
    EnterSkip(ActSendTime);
    EditField(h2,v,40,"Actual Duration Days",ViewOnly,ActDurationDays,false,0);
    EditField(h,v+=vs,80,"Actual Sent Time",Normal,ActSendTime,false,PasteCurTime);
    EnterSkip(ActArrDate);
    EditField(h2,v,80,"Actual Duration Hours",ViewOnly,ActDurationTime,false,0);
    EditField(h3,v=vm,80,"Actual Arrival Date",Normal,ActArrDate,false,PasteCurDate);
    EditField(h3,v+=vs,80,"Actual Arrival Time",Normal,ActArrTime,false,PasteCurTime);
  end;
  Tile(tilenr,110,false,tilenr,FreightCode); tilenr = tilenr + 1;
  vs = 20; h2 = 255;
  EditField(h=130,v=6,60,"Freight Company",Normal,FreightCode,false,FreightCompanySClass);
  EditField(h2,v,-40,"#Reg. No.#",Normal,FreightCompanyRegNr,false,0);
  EditField(h,v+=vs,-40,"Name",Normal,FreightCompany,false,0);
  EditField(h,v+=vs,-40,"Truck Information",Normal,TruckInfo,false,0);
  EditField(h,v+=vs,-40,"Driver",Normal,Driver,false,0);
  EditField(h,v+=vs,-40,"CMR",Normal,CMRText,false,0);
  if (HasNumberSeries and HasLocalization("PRT")) then begin
    if (HasOfficialSerNr) then begin
      EditField(h,v+=vs,100,"Official Ser No. 2",Normal,OfficialSerNr2,false,0);
      EditField(h2+100,v,135,"Status",Normal,Status,false,SetSClass);
    end;    
  end;
  Tile(tilenr,200,false,tilenr,FrAddr0); tilenr = tilenr + 1;
  vs = 20; h2 = 255;
  EditField(h=130,v=6,-40,"From Address",Normal,FrAddr0,false,0);
  EditField(h,v+=vs,-40,"",Normal,FrAddr1,false,0);
  EditField(h,v+=vs,-40,"",Normal,FrAddr2,false,0);
  EditField(h,v+=vs,-40,"",Normal,FrAddr3,false,0);
  EditField(h,v+=vs,-40,"",Normal,FrAddr4,false,0);
  if (HasThrouLocation) then begin
    EditField(h,v+=vs,-40,"Via Address",Normal,ThrouAddr0,false,0);
    EditField(h,v+=vs,-40,"",Normal,ThrouAddr1,false,0);
    EditField(h,v+=vs,-40,"",Normal,ThrouAddr2,false,0);
    EditField(h,v+=vs,-40,"",Normal,ThrouAddr3,false,0);
    EditField(h,v+=vs,-40,"",Normal,ThrouAddr4,false,0);
  end;
  EditField(h,v+=vs,-40,"To Address",Normal,ToAddr0,false,0);
  EditField(h,v+=vs,-40,"",Normal,ToAddr1,false,0);
  EditField(h,v+=vs,-40,"",Normal,ToAddr2,false,0);
  EditField(h,v+=vs,-40,"",Normal,ToAddr3,false,0);
  EditField(h,v+=vs,-40,"",Normal,ToAddr4,false,0);
  SpecialMenu("Cost Price in Old Unit Price",'=',0,"StockMovFillFIFODsm");
  SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
  if (HasIntegratedNL) then begin
    SpecialMenu("Open #NL# Transaction Sent",' ',2,"OpenTRFromStockMovSent");
    SpecialMenu("Open #NL# Transaction Received",'t',3,"OpenTRFromStockMov");
  end;
  if (HasLocalization("PRT")) then begin
    if (HasETaxDocuments) then begin
      SpecialMenu("Send to Tax Authorities",'',10,"EShipPRTDsm");
    end;
  end;
   if (HasConsStockMoveInvoices) then begin 
     SpecialMenu("Print #Stock# Movement Invoices",'p',3,"PrintStockMovInvoices");   
   end;   
  EndWindow;
end;

window PurRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Specify Deficiency List",PurRClass,CGRcW,RcType);
  SetWRect(20,80,450,380);
  v = 6; vs = 20; h = 140;
  EditFieldTL(h,v, 150,"Item No.",M4UStr,Normal,50,f1,false,INSClass);
  if (HasItemGroups) then begin
    EditFieldTL(h,v+=vs, 150,"Group",M4UStr,Normal,11,f3,false,ITSClass);
  end;
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs, 150,"Item Classification", M4UStr,Normal,60,f4,false,DISClass);
    EditFieldTL(h,v+=vs, 70,"Classification Type",M4UStr,Normal,60,f5,false,CTypeSClass);
  end;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v+=vs, 150,"Location",M4UStr,Normal,10,FirstAcc,false,LocationSClass);
  end;
  if (HasDepartments) then begin
    if (StandardHansa==false) then begin
      EditFieldTL(h,v+=vs, 150,"Department",M4UStr,Normal,10,LastAcc,false,DepSClass);
    end;
  end;
  if (HasSalesman or HasSalesmanBonus) then begin
    EditFieldTL(h,v+=vs ,100,"#Salesman#",M4UStr,Normal,10,AccStr,false,UserSClass);
  end;
  if (HasSalesGroup) then begin
    EditFieldTL(h,v+=vs ,50,"Sales Group",M4UStr,Normal,10,Stext,false,SalesGroupSClass);
  end;
  if (IsEnterprise) then begin
    CheckBox(h,v+=30,0,"Check Normal Order Qty on Purchase Item",flags[5]);
    CheckBox(h,v+=16,0,"Skip Items with zero balance in Stock",flags[3]);
    CheckBox(h,v+=16,0,"Skip Items without Deficiency",flags[4]);
    CheckBox(h,v+=16,0,"Include OKed Purchase Orders only",flags[7]);
  end;
  if (HasVarieties) then begin
    CheckBox(h,v+=16,0,"Show Varieties",flags[6]);
  end;
  CheckBox(h,v+=16,0,"Include material deficiency from sales orders",flags[10]);//payout-20; edz
  CheckBox(h,v+=16,0,"Only materials from specifications",flags[11]);//payout-20; edz
  ButtonFrame(h,vm=(v+=41),123,3,"Sorting");
  RadioButton(h,v,0,0,"No.",flags[2]);
  if (HasItemGroups) then begin
    RadioButton(h,v+=16,1,0,"Group",flags[2]);
  end;
  RadioButton(h,v+=16,2,0,"N_ame",flags[2]);
  EndFrame;
  EndWindow;
end;

window PlanRecordsVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("Specify Create Planned Records from Ordered Items",PlanRecordsVClass,CGMnt,RcType);
  SetWRect(20,80,520,400);
  PeriodField(h=160,v=6,"Planned Period");
  EditFieldTL(h,v+=20,150,"Items",M4UStr,Normal,41,f1,false,INSClass);
  if (HasItemGroups) then begin
  EditFieldTL(h,v+=20,150,"Item Group",M4UStr,Normal,5,f2,false,ITSClass);
  end;
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=20,150,"Classification",M4UStr,Normal,5,f4,false,DISClass);
  end;
  if (HasMultiLocations) then begin
  EditFieldTL(h,v+=20,150,"Locations",M4UStr,Normal,21,f3,false,LocationSClass);
  EditFieldTL(h,v+=20,150,"Location on Production",M4UStr,Normal,21,f6,false,LocationSClass);
  end;
  EditFieldTL(h,v+=20,150,"Main Material",M4UStr,Normal,21,f10,false,INSClass);//payout-20; edz
  EditFieldTL(h,v+=20,150,"Production Date",M4Date,Normal,0,d1,false,PasteCurDate);//payout-20; edz
  if (IsEnterprise) then begin
  ButtonFrame(h,v+=45,150,2,"Create");
  CheckBox(h,v,0,"Productions",flags[1]);
  CheckBox(h,v+=16,0,"#Purchase Orders#",flags[2]);
  end;
  CheckBox(h,v+=40,0,"Ignore Current #Stock# Levels",flags[3]);
//  CheckBox(h,v+=16,0,"Include Items with no future plans",flags[4]);
  CheckBox(h,v+=16,0,"Create Purchase Order per Sales Order",flags[5]);
  CheckBox(h,v+=16,0,"Order All Components",flags[6]);
  StaticText(h+18,v+=27,"Including Components needed before the Period.",false);
  EndWindow;
end;

window BarcodeDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v;
  WindowBegin("Barcode",BarcodeDClass,CGview,-);
  SetWRect(64,80,509,170);
  UseView(BarcodeVc);
  EditField(120,v=6,-40,"Barcode",Normal,Barcode,false,0);
  EditField(120,v+=20,-40,"Item",Normal,Itemcode,false,INSClass);
  EditField(120,v+=20,-40,"Item without var.",Normal,OrigItemcode,false,INSClass);//payout-21; edz
  EditField(120,v+=20,-40,"Customer",Normal,CustCode,false,CUSClass);
  EditField(120,v+=20,-40,"Comment",Normal,Comment,false,0);
  EndWindow;
end;

window ORLClass:3
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  Integer pos,rn;

  WindowBegin("Orders",ORLClass,CGmlist,-);
  SpawnClass(ORDClass);
  SetWRect(20,80,900,298);
  Sizeable(-1,-1,0,0);
  UseView(ORVc);
  FormName(PrintORL);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"No.",SerNr,false,SerNr);
  RlColKey(79,79,"OK",OKFlag,false,OKFlag);
  pos = 111;
  if (HasModIN) then begin
    RlColKey(pos,pos,"Delvd",ShipMark,false,ShipFlag);
    pos = pos + 32;
  end;
  if (HasModSL) then begin
    RlColKey(pos,pos,"Invd",InvMark,false,InvFlag);
    pos = pos + 32;
  end;
  RlCol(pos,pos,"Clsd",Closed,false);
  pos = pos + 32;
  RlColKey(pos,pos,"Order Date",OrdDate,false,OrdDate);
  pos = pos + 80;
  //payout-21; edz:
  RlColKey(pos,pos,"Plan. Del. Date",PY_PlanShip,false,PY_PlanShip);
  pos = pos + 80;
  //:edz
  if (HasMultiLocations) then begin
    RlCol   (pos,pos,"Location",Location,false);
    pos = pos + 60;
  end;
  RlColKey(pos,pos,"Cust. Ord. No.",CustOrdNr,false,CustOrdNr);
  pos = pos + 80;
  RlColKey(pos,pos,"Customer",CustCode,false,CustCode);
  pos = pos + 60;
  RlColKey(pos,pos,"Name",Addr0,false,Name);
  if (IsEnterprise) then begin
    if (AcceptanceStatusColumnTest("ORVc")) then begin
      CalculatedColumn(-240,-240,"Appr.","ORLClassAcceptanceStatus",false);
    end;
    RlColKey(-200,-200,"Class",OrderClass,false,OrderClass);
    RlColKey(-155,-155,"Total",Sum4,true,Sum4);
    RlCol(-75,-75,"Downpaid",DownPaySent,true);
  end else begin
    RlColKey(-55,-55,"Total",Sum4,true,Sum4);
  end;
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(-40,-15);
  end;
  SearchField("Search");
  if (GuiType==kGuiMetro) then begin
    rn = 0;
    RowMenuBegin("");
    if (HasModIN) then begin
      RowMenuItem(rn,"Create Delivery",'L','L',4300,"SHFromORLsm"); rn = rn + 1;
    end;
    RowMenuItem(rn,"Create Invoice",'L','L',4300,"IVFromORLsm"); rn = rn + 1;
    if (HasDownpayments) then begin
      RowMenuItem(rn,"Create Down Payment Invoice",'o','o',4300,"DownPayFromORLsm"); rn = rn + 1;
    end;
    RowMenuItem(rn,"Order Status",'r','r',4300,"ORStatusORLsm"); rn = rn + 1;
    if (HasModPO) then begin
      RowMenuItem(rn,"Create Purchase Order",' ',' ',4300,"POFromORLsm"); rn = rn + 1;
    end;
    if (HasModCRM) then begin
      RowMenuItem(rn,"Create Activity",'c','c',4300,"ActFromORLsm"); rn = rn + 1;
    end;
    if (IsEnterprise) then begin
      RowMenuItem(rn,"Set Order to Invoiced",' ',' ',4300,"ORToInvORLsm"); rn = rn + 1;
    end;
    EndRowMenu;
  end else begin
    SpecialMenu("Order Status",'r',3,"ORStatusORLsm");
    if (IsEnterprise) then begin
      SpecialMenu("Set Order to Invoiced",' ',6,"ORToInvORLsm");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModIN) then begin
      SpecialMenu("Delivery",'L',0,"SHFromORLsm");
    end;
    SpecialMenu("Invoice",'F',1,"IVFromORLsm");
    if (HasDownpayments) then begin
      SpecialMenu("Down Payment Invoice",'o',2,"DownPayFromORLsm");
    end;
    if (HasModPO) then begin
      SpecialMenu("Purchase Order",' ',4,"POFromORLsm");
    end;
    if (HasModCRM) then begin
      SpecialMenu("Activity",'c',5,"ActFromORLsm");
    end;
  end;
  EndWindow;
end;

window OrdItemRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Specify Ordered Items",OrdItemRClass,CGRcW,RcType);
  SetWRect(20,80,450,340);
  v = 6; vs = 20; h = 140;
  PeriodField(h,v,"Period");
  EditFieldTL(h,v+=vs, 150,"Item No.",   M4UStr,Normal,50,f1,false,INSClass);
  if (HasItemGroups) then begin
    EditFieldTL(h,v+=vs, 150,"Item Group",   M4UStr,Normal,11,f3,false,ITSClass);
  end;
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs, 150,"Item Classification", M4UStr,Normal,60,f8,false,DISClass);
  end;
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=vs, 150,"Order Class",   M4UStr,Normal,11,ObjStr,false,OrderClassSClass);
  end;
  EditFieldTL(h,v+=vs, 80,"Planned Delivery",M4Str,Normal,10,LastAcc,false,PasteCurDate);
  if (IsEnterprise) then begin
    h = 30;
  end;
  ButtonFrame(h,vm=(v+=41),123,2,"Cost Price");
  RadioButton(h,v,0,0,"Today's Price",flags[7]);
  RadioButton(h,v+=16,1,0,"Price on Order",flags[7]);
  if (IsEnterprise) then begin
    ButtonFrame(h+=150,v=vm,123,2,"Currency Rate");
    RadioButton(h,v,0,0,"Today",flags[6]);
    RadioButton(h,v+=16,1,0,"Order Date",flags[6]);
    h = 30;
  end;
  ButtonFrame(h,vm=(v+=41),123,3,"Sorting");
  RadioButton(h,v,0,0,"No.",flags[2]);
  if (HasItemGroups) then begin
    RadioButton(h,v+=16,1,0,"Group",flags[2]);
  end;
  RadioButton(h,v+=16,2,0,"Description",flags[2]);
  EndFrame;
  if (IsEnterprise) then begin
    ButtonFrame(h+=150,v=vm,123,3,"Print");
    RadioButton(h,v,0,0,"Items",UsedOnly);
    RadioButton(h,v+=16,1,0,"Group Totals",UsedOnly);
    RadioButton(h,v+=16,2,0,"Items Per Variety",UsedOnly);
  end else begin
    if (HasItemGroups) then begin
      CheckBox(h,v+=24,0,"Group totals only",UsedOnly);
    end;
  end;
  CheckBox(h=30,v+=32,0,"Include material deficiency from sales orders",flags[10]);//payout-20; edz
  CheckBox(h,v+=16,0,"Only materials from specifications",flags[11]);//payout-20; edz
  EndWindow;
end;

window SHDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  Integer tilenr,f,flipnr,rn;

  WindowBegin("Delivery",SHDClass,CGview,-);
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(SHVc);
  vs = 20;
  Tile(0,74,false,"",SerNr);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Customer",ViewOnly,CustCode,false,0);
  EditField(h=255,v=vm,-40,"Name",Normal,Addr0,false,0);
  v = v + vs;
  if (HasOfficialSerNr and (HasLocalization("AGO")==false)) then begin
    EditField(h,vm=v,135,"Official No.",Normal,OfficialSerNr,false,LegalInvNrSClass);
  end;
  if (HasTREO) then begin
    EditField(h+230,vm,95,"TREO No.",Normal,TREONr,false,0);
  end;
  CheckBox(h4=-100,v,0,"OK",OKFlag);
  tilenr = 1;
  if (IsEnterprise) then begin
    TileButton(tilenr,"Terms"); tilenr = tilenr + 1;
    TileButton(tilenr,"Items"); tilenr = tilenr + 1;
    TileButton(tilenr,"Del. Terms"); tilenr = tilenr + 1;
    TileButton(tilenr,"Packaging"); tilenr = tilenr + 1;
    TileButton(tilenr,"Del. Address"); tilenr = tilenr + 1;
    TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
    if (StandardHansa==false) then begin
      TileButton(tilenr,"Freight"); tilenr = tilenr + 1;
    end;    
  end else begin
    TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
    TileButton(tilenr,"Items"); tilenr = tilenr + 1;
    TileButton(tilenr,"Address"); tilenr = tilenr + 1;
    if (HasLocalization("PRT")) then begin
      if (HasModIN and HasModSL) then begin 
        TileButton(tilenr,"Packaging"); tilenr = tilenr + 1;   
      end;
      TileButton(tilenr,"Freight"); tilenr = tilenr + 1;
    end;
  end;
  tilenr = 1;
  Tile(tilenr,70,false,tilenr,ShipDate); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Date",Normal,ShipDate,false,PasteCurDate);
  if (HasMultiLocations) then begin
    v = v + vs;
    EditField(h1,v,82,"Location",Normal,Location,false,LocationSClass);
  end;
  if (HasRoute) then begin
    v = v + vs;
    EditField(h1,v,82,"Route",Normal,Sorting,false,DelRouteSClass);
  end;
  if (IsEnterprise) then begin
    v = v + vs;
    SoftEditField(h1,v,82,"Scan Barcode",Normal,"scanbarcode",false,0,M4Str,60);
  end;
  if (HasObjects) then begin
    EditField(h2,v=vm,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
  end;
  if (HasBranch) then begin
    v = v + vs;
    EditField(h2,v,135,"Branch",ViewOnly,BranchID,false,0);
  end;
  if (HasMultiLocations or HasModTS) then begin
    v = v + vs;
  end;
  if (HasModTS) then begin
    EditField(h2,v,135,"Project",ViewOnly,PRCode,false,0);
  end;
  if (HasObjects) then begin
    EditField(h3,v=vm,80,"Order No.",ViewOnly,OrderNr,false,0);
  end else begin
    if (IsEnterprise==false) then begin
      if (HasModTS) then begin
        EditField(h3,v=vm,135,"Order No.",ViewOnly,OrderNr,false,0);
      end else begin
        EditField(h2,v=vm,135,"Order No.",ViewOnly,OrderNr,false,0);
      end;
    end;
  end;
  if (IsEnterprise) then begin
    EditField(h3,v+=vs,80,"Order Class",Normal,SHClass,false,OrderClassSClass);
    CheckBox(h4,v=6,0,"Tel. Message",Check1);
  end;
  HalPushButton(h3,v+2*vs,h3+120,v+3*vs,"UpdateAvailSHDsm","Update stock");// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 18 April 2018 10:03:54

  if (IsEnterprise==false) then begin
    if (HasMultiLocations) then begin
      EditField(h1,v+=2*vs,-40,"Comment",Normal,Comment,false,0);
    end else begin
      EditField(h1,v+=vs,-40,"Comment",Normal,Comment,false,0);
    end;
    if (HasLanguages) then begin 
      EditField(h1,v+=vs,82,"Language",Normal,LangCode,false,LangSClass);
    end;      
  end;
  Tile(tilenr,190,true,tilenr,Math); tilenr = tilenr + 1;
  v = 20;
  MatrixBegin(4,v,-50,-35,-,200);
  MatTypedRow(stp);
  Flip(0);
  MatCol(1,32,"Item",0,ArtCode,false,ForSaleINSClass);
//  MatCol(1,94,"Var",0,VARList,false,VARSClass);
//  MatCol(1,144,"Description",0,Spec,false,0);
  MatCol(1,94,"Description",0,Spec,false,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Item",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,false,VARSClass);
//  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,94,"Description",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeHidden,32,"This row and all rows below it will be hidden on printout",false);
  t = kInvoiceRowTypePerceptionTax;    
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasCustItem) then begin
    MatCol(1,-230,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
  end;
  MatCol(1,-150,"Ordered",0,Ordered,true,0);
  MatCol(1,-98,"Avail.",0,InStock,true,0);
  MatCol(1,-50,"Del. Qty",0,Ship,true,0);
  if (HasCustItem) then begin
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,-230,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-150,"Ordered",0,Ordered,true,0);
  end else begin
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,-147,"Ordered",0,Ordered,true,0);
  end;
  MatCol(t,-98,"Avail.",0,InStock,true,0);
  MatCol(t,-50,"Del. Qty",0,Ship,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  if (IsEnterprise==false) then begin
    if (HasSerialNumbers) then begin
      MatCol(1,-350,"Serial No.",0,SerialNr,false,SerialNrSClass);
    end;
    if (HasObjects) then begin
      MatCol(1,-250,"Tags/Objects",0,Objects,false,ObjSClass);
    end;
    MatCol(1,-98,"#Stock# Value",0,FIFORowVal,false,0);
    if (HasLocalization("RUS")) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,-230,"Unit",0,UnitCode,false,UnitSClass);
      MatCol(1,-180,"Unit Name",0,UnitComment,false,0);
    end;
  end else begin
    MatCol(1,-350,"Serial No.",0,SerialNr,false,SerialNrSClass);
    MatCol(1,-250,"Best Before",0,BestBefore,false,0);
    MatCol(1,-150,"Location",0,Location,false,LocationSClass);
    if (HasPositions) then begin
      MatCol(1,-50,"Position",0,PosCode,false,UsedPosSClass);
    end;
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,-350,"Serial No.",0,SerialNr,false,SerialNrSClass);
    MatCol(t,-250,"Best Before",0,BestBefore,false,0);
    MatCol(t,-150,"Location",0,Location,false,LocationSClass);
    if (HasPositions) then begin
      MatCol(t,-50,"Position",0,PosCode,false,UsedPosSClass);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    if (HasBuyBack) then begin
      MatCol(1,-400,"BuyBack Cost",0,BBCostPrice,false,0);
    end;
    MatCol(1,-320,"Row FIFO",0,FIFORowVal,false,0);
    if (StandardHansa==false) then begin
      MatCol(1,-220,"W. Av. Base2",0,WAB2,false,0);
    end;
    MatCol(1,-120,"Base Price",0,BasePrice,false,0);
    MatCol(1,-40,"Coeff",0,Coefficient,false,0);
    if (HasBuyBack) then begin
      MatCol(t=kInvoiceRowTypeStructuredItemComponent,-400,"BuyBack Cost",0,BBCostPrice,false,0);
      MatCol(t,-320,"Row FIFO",0,FIFORowVal,false,0);
      if (StandardHansa==false) then begin
        MatCol(t,-220,"W. Av. Base2",0,WAB2,false,0);
      end;
      MatCol(t,-120,"Base Price",0,BasePrice,false,0);
      MatCol(t,-40,"Coeff",0,Coefficient,false,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,-400,"Recipe",0,Recepy,false,0);
    MatCol(1,-320,"Source",0,Source,false,SourceSClass);
    MatCol(1,-240,"Invoiced",0,Invd,false,0);
    if (StandardHansa==false) then begin
      MatCol(1,-160,"#Despatch# Date",0,DespatchRowDate,false,PasteCurDate);
      MatCol(1,-80,"#Despatch# Time",0,DespatchRowTime,false,PasteCurTime);
    end;
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,-400,"Recipe",0,Recepy,false,0);
    MatCol(t,-300,"Source",0,Source,false,SourceSClass);
    MatCol(t,-240,"Invoiced",0,Invd,false,0);
    if (StandardHansa==false) then begin
      MatCol(t,-160,"#Despatch# Date",0,DespatchRowDate,false,PasteCurDate);
      MatCol(t,-80,"#Despatch# Time",0,DespatchRowTime,false,PasteCurTime);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,-400,"Sales A/C",0,SalesAcc,false,AccSClass);
    MatCol(1,-330,"Cost A/C",0,CostAcc,false,AccSClass);
    MatCol(1,-250,"Tags/Objects",0,Objects,false,ObjSClass);
    MatCol(1,-135,"Width",0,UnitXval,true,0);
    MatCol(1,-90,"Height",0,UnitYval,true,0);
    MatCol(1,-45,"Depth",0,UnitZval,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,-400,"Sales A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-330,"Cost A/C",0,CostAcc,false,AccSClass);
    MatCol(t,-250,"Tags/Objects",0,Objects,false,ObjSClass);
    MatCol(t,-135,"Width",0,UnitXval,true,0);
    MatCol(t,-90,"Height",0,UnitYval,true,0);
    MatCol(t,-45,"Depth",0,UnitZval,true,0);
    if (StandardHansa==false) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,-300,"Packages",0,RowPackages,false,0);
      MatCol(1,-220,"P.Type",0,PackageType,false,PackTypeSClass);
      MatCol(1,-170,"Package Desc",0,PackageDesc,false,0);
      MatCol(1,-70,"Excise",0,ExciseNr,false,0);
      MatCol(t=kInvoiceRowTypeStructuredItemComponent,-300,"Packages",0,RowPackages,false,0);
      MatCol(t,-220,"P.Type",0,PackageType,false,PackTypeSClass);
      MatCol(t,-170,"Package Desc",0,PackageDesc,false,0);
      MatCol(t,-70,"Excise",0,ExciseNr,false,0);
    end;
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusSHDsm");
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      RowMenuItem(0,"Split Row",' ',' ',0,"SplitRowSHDsm");
    end;
  end;
  EndRowMenu;
  EndMatrix;
  vs = 22;
//  v = 21;
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;

//  CheckBox(20,-20,0,"OK",OKFlag);
  if (HasLocalization("PRT")) then begin
    EditField(120,-20,150,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
//    SoftEditField(120,-20,150,"Tax Auth. Approval",Normal,"TaxAdminServSeal",false,0,M4Str,200);
  end;
  EditField(-131,-20,80,"Total Qty",ViewOnly,TotQty,true,0);
  if (IsEnterprise) then begin
    Tile(tilenr,90,false,tilenr,ShipMode); tilenr = tilenr + 1;
    vs = 20;
    EditField(h1,v=vm,82,"Del. Mode",Normal,ShipMode,false,DMSClass);
    EditField(h1,v+=vs,80,"Tax Sum",ViewOnly,TAX1Sum,true,0);
    if (StandardHansa==false) then begin
      EditField(h1,v+=vs,80,"Declared Value",Normal,DeclaredVal,true,0);
      EditField(h1,v+=vs,-20,"E-Shipment status",ViewOnly,EShipStatus,false,0);
      if (HasLocalization("BRA,BOL,PRT")) then begin
        EditField(h1,v+=vs,80,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
      end;
    end;
    EditField(h2,v=vm,80,"Total Quantity",ViewOnly,TotQty,true,0);
    EditField(h2,v+=vs,80,"Total Weight",Normal,TotWeight,true,0);
    EditField(h2,v+=vs,80,"Total Volume",Normal,TotVolume,true,0);
    CheckBox(473,v=vm,0,"Use Invoice Address",Check2);
    if (StandardHansa==false) then begin
      CheckBox(473,v+=16,0,"Electronic Shipment Created",EShipmentCreated);
      CheckBox(473,v+=16,0,"Electronic Shipment Collected",EShipCollected);
    end;
    Tile(tilenr,110,false,tilenr,Packages); tilenr = tilenr + 1;
    h2 = 310;
    EditField(h1,v=6,82,"Transport No.",Normal,TransportNumber,false,0);
    EditField(h1,v+=vs,82,"Packages",Normal,Packages,true,0);
    if (HasLanguages) then begin 
      EditField(h1,v+=vs,82,"Language",Normal,LangCode,false,LangSClass);
    end;  
    EditField(h1,v+=vs,82,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (StandardHansa==false) then begin
      EditField(h1,v+=vs,-20,"Transp. Directives",Normal,TransportDirect,false,0);
      EditField(h1,v+=vs,80,"Plan. Sent Date",Normal,PlanSendDate,false,PasteCurDate);
      EditField(h1,v+=vs,80,"Plan. Sent Time",Normal,PlanSendTime,false,PasteCurTime);
    end;

    EditField(h2,v=6,135,"From City",Normal,FromCity,false,0);
    EditField(h2,v+=vs,135,"To City",Normal,ToCity,false,0);
    EditField(h2,v+=vs,135,"From Dock",Normal,FromDock,false,0);
    EditField(h2,v+=vs,135,"To Dock",Normal,ToDock,false,0);
    if (StandardHansa==false) then begin
      EditField(h2,v+=2*vs,80,"Plan. Arrival Date",Normal,PlanArrDate,false,PasteCurDate);
      EditField(h2,v+=vs,80,"Plan. Arrival Time",Normal,PlanArrTime,false,PasteCurTime);
    end;
  end;
  Tile(tilenr,150,false,tilenr,Addr1); tilenr = tilenr + 1;
  vs = 20;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      EditField(h1,v=6,80,"Address Code",Normal,DelAddrCode,false,DelAddr3SClass);
      EditField(h1,v+=vs,-20,"Delivery",Normal,Addr1,false,0);
    end else begin
      EditField(h1,v=6,-20,"Delivery",Normal,Addr1,false,0);
    end;
    EditField(h1,v+=vs,-20,"Address",Normal,Addr2,false,0);
  end else begin
    EditField(h1,v=6,-20,"Address",Normal,Addr1,false,0);
    EditField(h1,v+=vs,-20,"",Normal,Addr2,false,0);
  end;
  EditField(h1,v+=vs,-20,"",Normal,Addr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  if (HasCountryPerCustomer) then begin
    EditField(h1,v+=vs,80,"Country",Normal,DelCountry,false,CountrySClass);
    if (HasLocalization("BRA")) then begin 
      EditField(h2-109,v,232,"",ViewOnly,DelCountryName,false,0);
    end;    
  end;
  if (IsEnterprise) then begin
    EditField(h3,v,-20,"Region",Normal,Region,false,RegionSClass);
    Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
    EditField(h1+10,v=6,-20,"Comment",Normal,Comment,false,0);
    EditField(h1+10,v+=20,-20,"Sales Contract Type",Normal,ORCOType,false,0);
    if (HasNumberSeries and HasLocalization("PRT")) then begin
      if (HasOfficialSerNr) then begin
        EditField(h1+10,v+=vs,100,"Official Ser No. 2",Normal,OfficialSerNr2,false,0);
        EditField(h2,v,135,"Status",Normal,Status,false,SetSClass);
      end;    
    end;
  end else begin
    if (HasLocalization("RUS")) then begin
      EditField(h1,v+=vs,80,"Total Weight",Normal,TotWeight,true,0);
    end;
  end;
  if (IsStandardProduct and HasLocalization("PRT,LTU") and HasModIN and HasModSL) then begin 
    Tile(tilenr,110,false,tilenr,PlanSendDate); tilenr = tilenr + 1;
    h2 = 310;
    EditField(h1,v=6,80,"Plan. Sent Date",Normal,PlanSendDate,false,PasteCurDate);
    EditField(h1,v+=vs,80,"Plan. Sent Time",Normal,PlanSendTime,false,PasteCurTime);
    if (HasLocalization("PRT")) then begin
      EditField(h2,v=6,80,"Plan. Arrival Date",Normal,PlanArrDate,false,PasteCurDate);
      EditField(h2,v+=vs,80,"Plan. Arrival Time",Normal,PlanArrTime,false,PasteCurTime);      
    end;
  end;
  if (IsEnterprise or HasLocalization("PRT,LTU")) and (StandardHansa==false) then begin
    Tile(tilenr,130,false,tilenr,FreightCode); tilenr = tilenr + 1;
    if (IsEnterprise) then begin
      HalPushButton(473,2,600,22,"UpdateSHPackages","Define Packages");
    end;
    EditField(h1,v=6,80,"Freight Company",Normal,FreightCode,false,FreightCompanySClass);
    EditField(h1,v+=vs,-20,"Name",Normal,FreightCompany,false,0);
    EditField(h1,v+=vs,-20,"#Reg. No.#",Normal,FreightCompanyRegNr,false,0);
    EditField(h1,v+=vs,-20,"Truck Information",Normal,TruckInfo,false,0);
    if (IsEnterprise or HasLocalization("PRT")) then begin
      EditField(h1,v+=vs,-20,"Driver",Normal,Driver,false,0);
      EditField(h1,v+=vs,-20,"CMR",Normal,CMRText,false,0); // International transporting number
    end;
  end;  
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Item Status",'I',2,"ItemStatusSHDsm");
    if (HasIntegratedNL) then begin
      SpecialMenu("Open #NL# Transaction",'t',3,"OpenTRFromSH");
    end;
    SpecialMenu("Print Freight Labels",'l',0,"PrintSHLabSHDsm");
    if (HasReturnedGoods and HasModIN) then begin
      SpecialMenu("Create Returned Goods",'B',5,"RetFromSHSpec");
    end;
  end else begin
  SpecialMenu("Print Freight Labels",'l',0,"PrintSHLabSHDsm");
  if (IsEnterprise) then begin
    SpecialMenu("Recalculate Weight",'w',1,"SHCalcWeightDsm");
  end;
  if (HasIntegratedNL) then begin
    SpecialMenu("Open #NL# Transaction",'t',3,"OpenTRFromSH");
  end;
  if (HasLocalization("SWE")) then begin
    SpecialMenu("ASG Export",' ',4,"ASGEnSHDsm"); /* Specific for Sweden */
  end;
  if (HasLocalization("NOR")) then begin
    SpecialMenu("Winedi Export",' ',4,"WinEDIEnSHDsm"); /* Specific for Norway */
  end;
  if (HasLocalization("PRT")) then begin
    if (HasETaxDocuments) then begin
      SpecialMenu("Send to Tax Authorities",'',10,"EShipPRTDsm");
    end;
  end;
  if (IsEnterprise) then begin
    SpecialMenu("Refill Batch No. Items",' ',6,"INBatchSHSpec");
  end;
  if (HasModWHM) then begin
    SpecialMenu("OK Warehouse #Stock# Movements",' ',8,"OKStockMovSHrDsm");
    SpecialMenu("Warehouse Picking List",' ',9,"PickingListDsm");
  end;
//  SpecialMenu("Calculate Manually",' ',10,"CalcSHMan"); /* Specific for one customer in Portugal, you may comment it out */
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      SpecialMenu("Register Electronic Shipment",' ',9,"EShipRegisterDsm");
    end;
    if (GuiType==kGuiiPhone) then begin
      SpecialMenu("Sign",' ',10,"SignSHDsm");
    end;
  end;
  SpecialMenu("Update stock",' ',9,"UpdateAvailSHDsm");// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 17 April 2018 14:32:25

  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModSL) then begin
    SpecialMenu("Invoice",'F',1,"IVFromSHDsm");
  end;
  if (IsEnterprise or HasReturnedGoods) then begin
    SpecialMenu("Returned Goods",'B',2,"RetFromSHDsm");
  end;
  end;
  EndWindow;
end;

window CCatDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;
  WindowBegin("Customer Category",CCatDClass,CGview,-);
  SetWRect(64,80,600,330);
  UseView(CCatVc);
  v = 6; vs = 20; h = 100;
  if (IsEnterprise) then begin
    Tile(0,90,false,"",Code);
    EditField(h,v, 70,"Code",Normal,Code,false,0);
    EditField(h,v+=vs,-40,"Description",Normal,Comment,false,0);
    if (StandardHansa==false) then begin
      EditField(h,v+=vs,-40,"Class. Types",Normal,ClassType,false,CTypeSClass);
    end;
    TileButton(1,"Pricing");
    TileButton(2,"Accounts");
    if (StandardHansa==false) then begin
      TileButton(3,"Web");
    end;
    if (HasCharts) then begin
      TileButton(4,"BI");
    end;
    Tile(1,110,false,"1",PLCode);
    v = 6; h = 200;
    EditField(h,v,70,"Price List",Normal,PLCode,false,PLDefSClass);
    if (HasAdvancedPricing) then begin
      EditField(h,v+=vs,70,"Discount Matrix",Normal,RebCode,false,RebSClass);
    end;
    EditField(h,v+=vs,55,"Down Payment Percentage",Normal,DownPayPerc,false,0);
    if (HasItemClassification) then begin
      EditField(h,v+=vs,55,"Main Item Classification",Normal,MainDispGroup,false,DISClass);
    end;
    if (StandardHansa==false) then begin
      EditField(h,v+=vs,55,"Web Order Class",Normal,WebOrderClass,false,OrderClassSClass);
    end;
    EditField(h,v+=vs ,150,"Objects",Normal,BPIObjects,false,ObjSClass);// Edit ************************** BPI Ukraine - KramarAlexandr - Wednesday, 6 June 2018 11:46:29

//##  EditField(h,v+=vs ,70, "Commission Matrix",Normal,ComCode,false,ComSClass);
    Tile(2,130,false,"2",ARAcc);
    v = 6; h = 200;
    EditField(h,v ,55,"Debtors Account",Normal,ARAcc,false,AccSClass);
    EditField(h,v+=vs,55,"Bad Debtors Account",Normal,BadARAcc,false,AccSClass);
    EditField(h,v+=vs,55,"Debtors On Account A/C",Normal,OnAccAcc,false,AccSClass);
    EditField(h,v+=vs,55,"Creditors Account",Normal,AccAP,false,AccSClass);
    EditField(h,v+=vs,55,"Creditors On Account A/C",Normal,OnAccAccAP,false,AccSClass);
    
    if (StandardHansa==false) then begin
      Tile(3,50,false,"3",WebDisplays);
      v = 6;
      EditField(h,v,55,"Display on the Web",Normal,WebDisplays,false,WebDisplaySClass);
      EditField(h,v+=vs,55,"Web Tag/Object Type",Normal,WebOTCode,false,OTSClass);
    end;
    if (HasCharts) then begin
      Tile(4,400,false,"4",-);
      ChartArea(10,6,-10,390,"$CCATDCLass_BIChart");
    end;
  end else begin
    SetWRect(64,80,509,200);
    UseView(CCatVc);
    v = 10; vs = 20; h = 130; h2 = 320;
    EditField(h,v, 70,"Code",Normal,Code,false,0);
    EditField(h,v+=vs ,-40,"Description",Normal,Comment,false,0);
    if (HasContactClassification) then begin
      EditField(h,v+=vs ,-40,"Class. Types",Normal,ClassType,false,CTypeSClass);
    end;
    if (HasPriceLists) then begin
      EditField(h,v+=vs ,70, "Price List",Normal,PLCode,false,PLDefSClass);
    end;
    if (HasModNL) then begin
      EditField(h,v+=vs ,70,"Debtors A/C",Normal,ARAcc,false,AccSClass);
      if (HasRussianPrepayment or HasPrepayments) then begin
        if (HasModSL) then begin
          EditField(h,v+=vs,70,"Debtors On Acc. A/C",Normal,OnAccAcc,false,AccSClass);
        end;
        if (HasModPL) then begin
          EditField(h,v+=vs,70,"Creditors On Acc. A/C",Normal,OnAccAccAP,false,AccSClass);
        end;
      end;
    end;
    if (HasAdvancedPricing) then begin
      EditField(h,v+=vs ,70, "Discount Matrix",Normal,RebCode,false,RebSClass);
    end;
  end;
  EndWindow;
end;


window AccTClass:3
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real f,h,h2,h3,h4,h5,v,vm,vs;
  if (HasModNL or IsEnterprise) then begin
    if (HasModSL==false) then begin
      WindowBegin("Account Usage",AccTClass,CGSbl,-);
    end else begin
      WindowBegin("Account Usage #S/L#",AccTClass,CGSbl,-);
    end;
  end else begin
    WindowBegin("Invoice Settings",AccTClass,CGSbl,-);
  end;
  SetBlid(AccBlock);
  SetWRect(20,80,885,450);
  if (IsEnterprise) then begin
    Sizeable(-1,-1,0,0);
    vs = 20; h = 160; f = 70; h2 = 400; h3 = 250; h4 = 535; h5 = 520;
    Tile(0,30,false,"",ARAcc);
    TileButton(1,"Debtors");
    TileButton(2,"#VAT / Tax#");
    TileButton(3,"Exchange Rate");
    TileButton(4,"Sales");
    TileButton(5,"Sales Phys.");// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 11 September 2018 09:48:08
    TileButton(6,"Credit");
    Tile(1,250,false,"1",ARAcc);
    EditField(h,vm=(v=6),f,"Debtors",Normal,ARAcc,false,AccSClass);
    EditField(h,v+=vs,f,"Bad Debtors",Normal,BadARAcc,false,AccSClass);
    EditField(h,v+=vs,f,"Cash",Normal,CashAcc,false,AccSClass);
    EditField(h,v+=vs,f,"POS Change",Normal,CashBackAcc,false,AccSClass);
    EditField(h,v+=vs,f,"On Account A/C",Normal,OnAccAcc,false,AccSClass);
    EditField(h,v+=vs,f,"Round Off Gain",Normal,RndAcc,false,AccSClass);
    EditField(h,v+=vs,f,"Round Off Loss",Normal,RndLossAcc,false,AccSClass);
    if (StandardHansa==false) then begin
      EditField(h,v+=vs,f,"Commission",Normal,CommisionAcc,false,AccSClass);
      EditField(h,v+=vs,f,"Invoice Discount",Normal,DiscountAcc,false,AccSClass);
    end;
    v = vm;
    if (HasObjects) then begin
      CheckBox(h3,v,0,"Tags/Objects on Debtors A/C",ARUseObj); v = v + 16;      
    end;
    CheckBox(h3,v,0,"Sub-ledger Checking",SLAccTest);
    CheckBox(h3,v+=16,0,"Invoices Update #Stock#",InvUpdStock);
    CheckBox(h3,v+=16,0,"I_nvoice info on #N/L# Transaction",ARonTR);
    CheckBox(h3,v+=16,0,"Update Base Currency when Invoicing",UpdBaseRate);
    CheckBox(h3,v+=16,0,"Update Foreign Currency when Invoicing",UpdForeginRate);
    CheckBox(h3,v+=16,0,"Skip Header A/C Tags/Objects on Sales and COS A/C",SkipObjectsOnIVFromHeader);
    CheckBox(h3,v+=16,0,"Force Chronology for Invoice",ChronologyforInvNo);
    CheckBox(h3,v+=16,0,"Use Credit Sales Accounts",CredSalesAccs);
    CheckBox(h3,v+=16,0,"Use Prepayments, not On Account",DemandPPNo);
    CheckBox(h3,v+=16,0,"Force Unique Prepayment Numbers",ForceUniquePP);
    CheckBox(h3,v+=16,0,"Separate Row per Receipt Row on Bank A/C",IPTransBankRowPerCU);
    if (StandardHansa==false) then begin
      CheckBox(h3,v+=16,0,"Calculate Due Date from Service Delivery Date",DueDateBasedOnServDelDate);
    end;
    CheckBox(h4,v=vm,0,"Tags/Objects on Bank A/C",ObjectonBankAcc);
    if (StandardHansa==false) then begin
      CheckBox(h4,v+=16,0,"Post Discount",BookedDiscount);
      CheckBox(h4,v+=16,0,"Disallow over-receive Invoice",NoOverPayIV);
//      CheckBox(h4,v+=16,0,"Do not Print rows with Negative Sums to Fiscal Printer",DonotFPPrintRowsNegativeSum); //  not used anywhere in the rest of the code
    end;
    CheckBox(h4,v+=16,0,"Disallow Negative Totals on Sales",DisallowNegativeTotalsonSales);
    CheckBox(h4,v+=16,0,"Disallow Negative Row Sums on Sales",DisallowNegativeRowSumsonSales);
//    CheckBox(h4,v+=16,0,"Allow Receipt Date before Invoice Date",IPbeforeIVDate);
//this lovely checkbox leads to totoaly incorect SL and open inv cust stat and all other reports in SL
//comenting out
    if (HasLocalization("BOL")) then begin 
      CheckBox(h4,v+=16,0,"Disallow create invoice if the Dosage Key has expired",CheckDosageKey);
    end;
    Tile(2,290,false,"2",VATBAcc);
    EditField(h,vm=(v=6),f,"#VAT# (A/C)",Normal,VATBAcc,false,AccSClass);
    if (StandardHansa==false) then begin
      EditField(h,v+=vs,f,"Settl. Discount #VAT#",Normal,VATERAcc,false,AccSClass);
    end;
    EditField(h,v+=vs,f,"Prepayment #VAT#",Normal,OnAccVATAcc,false,AccSClass);//as it was in 4.2
  //  EditField(h,v+=vs,f,"Prepayment #VAT#",Normal,PreIPVATAcc,false,AccSClass);//no code using it
    EditField(h,v+=vs,f,"#VAT# on Sales Account",Normal,SalesVAT,false,AccSClass);
    EditField(h,v+=vs,f,"Tax on Sales Account",Normal,SalesTAX,false,AccSClass);
    if (StandardHansa==false) then begin
      EditField(h,v+=vs,f,"Internal #VAT# A/C",Normal,IntARAcc,false,AccSClass);
    end;
    EditField(h,v+=vs,f,"Tax Accrual A/C",Normal,Tax1TmpAcc,false,AccSClass);
    ButtonFrame(h3,v=vm+10,380,3,"Ext. Tax");
    RadioButton(h3,v   ,0,0,"Calculate Ext. Tax on Sum incl. #VAT#",NoTAXonVAT);
    RadioButton(h3,v+=16,1,0,"Calculate Ext. Tax on Sum excl. #VAT#",NoTAXonVAT);
    RadioButton(h3,v+=16,2,0,"Calculate Ext. Tax on Sum excl. #VAT# and calculate #VAT# on Ext. Tax",NoTAXonVAT);

    ButtonFrame(h3,vm=(v+=40),165,3,"Base Price");
    RadioButton(h3,v    ,kBasePriceNotInclVAT,0,"Not Including #VAT#",BasePriceInclVAT);
    RadioButton(h3,v+=16,kBasePriceInclVATandTax,0,"Including #VAT# and Ext. Tax",BasePriceInclVAT);
    RadioButton(h3,v+=16,kBasePriceInclVAT,0,"Including #VAT#",BasePriceInclVAT);

    CheckBox(h4=500,vm,0,"Total not including Ext. Tax",TotalwoTAX);

    CheckBox(h3,vm=(v+=24),0,"#VAT# Code Control",VATCodeCtrl);
    if (HasLocalization("PRT")==false) then begin
      CheckBox(h3,v+=16,0,"Post Receipt #VAT#",IPBookVAT);
    end;
    if (StandardHansa==false) then begin
      CheckBox(h3,v+=16,0,"Post #VAT# on Rate Gain",BookVATonRateGain);
      CheckBox(h3,v+=16,0,"Post #VAT# of Credit Inv. to #VAT# Inp. A/C",BookCreditOnPurchAcc);
      CheckBox(h3,v+=16,0,"Post #VAT# Only from Down Payments",BookVATOnlyFromDownpayment);
      CheckBox(h3,v+=16,0,"Exclude #VAT# on Settl. Discount",DiscCashVAT);
    end;
    CheckBox(h3,v+=16,0,"No warning for duplicate #VAT Reg. No.#",NoWarnOnDupVATnoOnCU);
    CheckBox(h3,v+=16,0,"Do not paste #VAT# Code to Receipts",NoPasteVATToIP);
    if (HasExtTax) then begin
      CheckBox(h3,v+=16,0,"Allow Items without Commodity Code for Tax2 Calculation",AllowItemWOCommodity);
    end;

    CheckBox(h4,v=vm,0,"Tags/Objects on #VAT# Account",VATUseObj);
    if (StandardHansa==false) then begin
      CheckBox(h4,v+=16,0,"Turnover Incl. #VAT#",RevInclVAT);
    end;
    CheckBox(h4,v+=16,0,"Post Prepayment #VAT#",PreIPBookVAT);
    if (StandardHansa==false and HasLocalization("HRV,POL,RUS,SLV,SVN,SRB,UKR")) then begin
      CheckBox(h4,v+=16,0,"Post Inv. #VAT# to #VAT# Corr. A/C",PostIVVATonVATCorr);
    end;
    CheckBox(h4,v+=16,0,"Post #VAT# from Receipts Write Offs",PostWriteOffVAT);
    if (HasExtTax) then begin
      CheckBox(h4,v+=16,0,"Calculate Perception Taxes",CalculatePerceptionTaxes);
    end;
    CheckBox(h4,v+=16,0,"#VAT# Zone from Delivery Address",ExportFlagfromDelAddr);
    Tile(3,150,false,"3",CredAcc);
    h2 = 400;
    EditField(h,v=6,f,"Write Offs Gain",Normal,CredAcc,false,AccSClass);
    EditField(h,v+=vs,f,"Write Offs Loss",Normal,WriteOffLossAcc,false,AccSClass);
    EditField(h,v+=vs,f,"Rate Round Off",Normal,RateRndOffAcc,false,AccSClass);
    if (StandardHansa==false) then begin
      EditField(h,v+=vs,f,"EMU Rate Round Off",Normal,EMURndOffAcc,false,AccSClass);
      EditField(h,v+=vs,f,"EMU Rate Write Off",Normal,EMUWriteOffAcc,false,AccSClass);
    end;
    EditField(h,v+=vs,f,"Base Currency Round Off",Normal,BaseRoundOffAcc,false,AccSClass);
    EditField(h2,v=6,f,"Rate Gain",Normal,RateGainAcc,false,AccSClass);
    EditField(h2,v+=vs,f,"Rate Loss",Normal,RateLossAcc,false,AccSClass);
    EditField(h2,v+=vs,f,"Bank Rate Gain",Normal,BankRateGainAcc,false,AccSClass);
    EditField(h2,v+=vs,f,"Bank Rate Loss",Normal,BankRateLossAcc,false,AccSClass);
    EditField(h2,v+=vs,f,"Bank Fee",Normal,ExtraCostAcc,false,AccSClass);
    EditField(h2,v+=vs,f,"Forex Trans. A/C",Normal,ForexTRAcc,false,AccSClass);
    CheckBox(h,v+=24,0,"Post Rate Gain/Loss per Receipt Line",BookRateGainPerIPRow);
    Tile(4,150,false,"4",DomSalesAcc);
    EditField(h,v=6,f,"#Domestic# Sales A/C",Normal,DomSalesAcc,false,AccSClass);
    EditField(h,v+=vs,f,VATZoneEditFieldLabel_ENG(1) & "Sales A/C",Normal,EUSalesAcc,false,AccSClass);
    EditField(h,v+=vs,f,"Export Sales A/C",Normal,ExpSalesAcc,false,AccSClass);
    EditField(h,v+=vs,f,"#Dom.# Settl. Discount",Normal,ERebAcc,false,AccSClass);
    EditField(h,v+=vs,f,VATZoneEditFieldLabel_ENG(1) & " Settl. Discount",Normal,EUERebAcc,false,AccSClass);
    EditField(h,v+=vs,f,"Export" & " Settl. Discount",Normal,ExpERebAcc,false,AccSClass);
    if (StandardHansa==false) then begin
      CheckBox(h,v+=22,0,"Register Cash Sales in Fiscal Control Unit",CashSalesToFiscalControlUnit);
    end;
  //  EditField(h,v+=vs,f,"Internal Sales A/C",Normal,IntDomSalesAcc,false,AccSClass);
    EditField(h2,v=6,20,"#Dom.# #VAT# Code",Normal,VATCodeDom,false,VATCodeSClass);
    EditField(h2,v+=vs,20,VATZoneEditFieldLabel_ENG(1) & "#VAT# Code",Normal,VATCodeEU,false,VATCodeSClass);
    EditField(h2,v+=vs,20,"Export #VAT# Code",Normal,VATCodeExp,false,VATCodeSClass);
    if (HasTaxMatrix) then begin
      EditField(h2=540,v=6,50,"#Dom.# Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
      EditField(h2,v+=vs,50,VATZoneEditFieldLabel_ENG(1) & "Tax Temp.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
      EditField(h2,v+=vs,50,"Export Tax Temp.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
    end;
    // Edit Start ---------------------------------------------- Edit Start
	//Tuesday, 11 September 2018 09:34:17
	
    
    Tile(5,150,false,"5",PhysDomSaleAcc);
    EditField(h,v=6,f,"Domestic Sales A/C",Normal,PhysDomSaleAcc,false,AccSClass);
    EditField(h,v+=vs,f,"Inside EU Sales A/C",Normal,PhysEUSaleAcc,false,AccSClass);
    EditField(h,v+=vs,f,"Export Sales A/C",Normal,PhysExpEUSaleAcc,false,AccSClass);
    EditField(h,v+=vs,f,"Dom. VAT Code",Normal,PhysDomVAT,false,VATCodeSClass);
    EditField(h,v+=vs,f,"Inside EU VAT Code",Normal,PhysEUVAT,false,VATCodeSClass);
    EditField(h,v+=vs,f,"Export VAT Code",Normal,PhysExpVAT,false,VATCodeSClass);
    
	// Edit End ---------------------------------------------- Edit End
	
    Tile(6,160,false,"6",CredDomSalesAcc);
    h2 = 400;
    StaticText(h,v=12,"#Credit Notes#",false);
    EditField(h,vm=(v+=16),55,"#Domestic# Sales A/C",Normal,CredDomSalesAcc,false,AccSClass);
    EditField(h,v+=vs,55,VATZoneEditFieldLabel_ENG(1)  & "Sales A/C",Normal,CredEUSalesAcc,false,AccSClass);
    EditField(h,v+=vs,55,"Export Sales A/C",Normal,CredExpSalesAcc,false,AccSClass);
    EditField(h2,v=vm,20,"#Domestic# #VAT# Code",Normal,CredVATCodeDom,false,VATCodeSClass);
    EditField(h2,v+=vs,20,VATZoneEditFieldLabel_ENG(1) & "#VAT# Code",Normal,CredVATCodeEU,false,VATCodeSClass);
    EditField(h2,v+=vs,20,"Export #VAT# Code",Normal,CredVATCodeExp,false,VATCodeSClass);
    CheckBox(h,v+=32,0,"Don't use Automatic Autotransactions on #Credit Notes#",NoAutAutoTransOnCredIV);
    CheckBox(h,v+=16,0,"Automatically set Disputed Flag on #Credit Notes#",SetDisputedFlagsOnCredIV);
    CheckBox(h,v+=16,0,"Do not allow Credit Invoices without No.",CredInvWithNo);
    CheckBox(h,v+=16,0,"Require #Credit Note# Reason",RequireCreditNoteReason);
    CheckBox(h,v+=16,0,"#Credit Notes# Total value may not exceed Invoice value",CreditIVTotNotExceedInvCheck);
    CheckBox(h,v+=16,0,"Create #Purchase Invoice# from #Credit Note#",ConnectCreditNotetoVI);
    CheckBox(h,v+=16,0,"Negative Amounts on #Credit Notes# Printout",PrintNegAmountsCredNote);
  end else begin
    if (HasModNL) then begin
      SetWRect(20,80,520,300);
      vs = 20; h = 130; f = 70; h2 = 260; h3 = 420;
      if (HasMultiCurrency) then begin
        h = 150;
      end;
      EditField(h,vm=(v=6),f,"Debtors",Normal,ARAcc,false,AccSClass);
      if (HasLocalization("PRT,ZWE")) then begin
        EditField(h,v+=vs,f,"Bad Debtors",Normal,BadARAcc,false,AccSClass);
      end;
      EditField(h,v+=vs,f,"Cash",Normal,CashAcc,false,AccSClass);
      EditField(h,v+=vs,f,"Round Off",Normal,RndAcc,false,AccSClass);
//      EditField(h,v+=vs,f,"Bank Fee",Normal,ExtraCostAcc,false,AccSClass); // no fee option in Std
      if (HasModSL) then begin
        EditField(h,v+=vs,f,"Write Off",Normal,CredAcc,false,AccSClass);
//        EditField(h,v+=vs,f,"On Account",Normal,OnAccAcc,false,AccSClass);//not in stdacc
      end;
      if (HasMultiCurrency) then begin
        EditField(h,v+=vs,f,"Base Currency Round Off",Normal,BaseRoundOffAcc,false,AccSClass);
        EditField(h,v+=vs,f,"Rate Gain",Normal,RateGainAcc,false,AccSClass);
        EditField(h,v+=vs,f,"Rate Loss",Normal,RateLossAcc,false,AccSClass);
      end;
  /*
    if (HasMultiCurrency) then begin
    EditField(h,v+=vs,f,"Domestic Sales A/C",Normal,DomSalesAcc,false,AccSClass);
    EditField(h,v+=vs,f,"EU Sales A/C",Normal,EUSalesAcc,false,AccSClass);
    EditField(h,v+=vs,f,"Export Sales A/C",Normal,ExpSalesAcc,false,AccSClass);
    EditField(h3,v=6,20,"Domestic #VAT Code#",Normal,VATCodeDom,false,VATCodeSClass);
    EditField(h3,v+=vs,20,"EU #VAT Code#",Normal,VATCodeEU,false,VATCodeSClass);
    EditField(h3,v+=vs,20,"Export #VAT Code#",Normal,VATCodeExp,false,VATCodeSClass);
    end else begin
  */
      if (IsBooks and IsStandardProduct==false) then begin
        EditField(h,v+=vs,f,"#VAT# (A/C)",Normal,VATBAcc,false,AccSClass);
        EditField(h,v+=vs,f,"Bank Fee",Normal,ExtraCostAcc,false,AccSClass);
        EditField(h,v+=vs,f,"On Account",Normal,OnAccAcc,false,AccSClass);
      end;
      if (HasSettlementDiscount) then begin
        EditField(h,v+=vs,f,"Settl. Discount",Normal,ERebAcc,false,AccSClass);
      end;
      if (HasRussianPrepayment or (HasLocalization("LVA") and HasPrepayments)) then begin
        if (HasTaxMatrix==false) then begin
          EditField(h,v+=vs,f,"Prepayment #VAT#",Normal,OnAccVATAcc,false,AccSClass);
        end;
      end;
      if (HasSettlementDiscount) then begin
        EditField(h,v+=vs,f,"Settl. Discount #VAT#",Normal,VATERAcc,false,AccSClass);
      end;
      if (IsStandardProduct) then begin
        if (HasVATZone==false) then begin
          EditField(h,v+=vs,f,"Sales",Normal,DomSalesAcc,false,AccSClass);
          if (HasTaxMatrix) then begin
            EditField(h,v+=vs,50,"Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
          end else begin
            EditField(h,v+=vs,20,"#VAT# Code",Normal,VATCodeDom,false,VATCodeSClass);
          end;
        end;
      end;
  //  end;
      if (HasRussianPrepayment or HasPrepayments) then begin
        EditField(h,v+=vs,f,"On Account",Normal,OnAccAcc,false,AccSClass);
      end;
      if (HasLocalization("PRT")) then begin
        StaticText(h,v+=48,"#Credit Notes#",false);
        CheckBox(h,v+=14,0,"Use Credit Sales Account and #VAT# Code",CredSalesAccs);
        EditField(h,v+=24,55,"Sales",Normal,CredDomSalesAcc,false,AccSClass);
        EditField(h,v+=vs,20,"#VAT# Code",Normal,CredVATCodeDom,false,VATCodeSClass);
      end;
      if (HasVATZone) then begin
        EditField(h,vm=(v+=2*vs),f,"#Domestic# Sales A/C",Normal,DomSalesAcc,false,AccSClass);
        EditField(h,v+=vs,f,VATZoneEditFieldLabel_ENG(1) & " Sales A/C",Normal,EUSalesAcc,false,AccSClass);
        EditField(h,v+=vs,f,VATZoneEditFieldLabel_ENG(2) & " Sales A/C",Normal,ExpSalesAcc,false,AccSClass);
        if (HasTaxMatrix) then begin
          EditField(h2+100,v=vm,50,"#Dom.# Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
          EditField(h2+100,v+=vs,50,VATZoneEditFieldLabel_ENG(1) & "Tax Temp.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
          EditField(h2+100,v+=vs,50,"Export Tax Temp.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
        end else begin
          if (HasLocalization("POL")) then begin
            EditField(h,v+=vs,f,"Internal #VAT# A/C",Normal,IntARAcc,false,AccSClass);
          end;
          EditField(h2+100,v=vm,20,"#Domestic# #VAT# Code",Normal,VATCodeDom,false,VATCodeSClass);
          EditField(h2+100,v+=vs,20,VATZoneEditFieldLabel_ENG(1) & "#VAT# Code",Normal,VATCodeEU,false,VATCodeSClass);
          EditField(h2+100,v+=vs,20,VATZoneEditFieldLabel_ENG(2) & "#VAT# Code",Normal,VATCodeExp,false,VATCodeSClass);
        end;
      end;
      ButtonFrame(h2,v=22,120,2,"Base Price");
      RadioButton(h2,v,0,0,"Not Including #VAT#",BasePriceInclVAT);
      RadioButton(h2,v+=16,2,0,"Including #VAT#",BasePriceInclVAT);
      v = v + 24;
      if (HasModIN) then begin
        CheckBox(h2,v,0,"Invoices Update #Stock#",InvUpdStock); v = v + 16;
      end;
      if ((HasLocalization("HRV") and HasRussianPrepayment) or (HasLocalization("LVA") and HasPrepayments)) then begin
 //       CheckBox(h2,v,0,"Post Receipt #VAT#",IPBookVAT); v = v + 16; //we output this later
        CheckBox(h2,v,0,"Post Prepayment #VAT#",PreIPBookVAT); v = v + 16;
      end;
      if (HasMultiCurrency) then begin
        CheckBox(h2,v,0,"Post Rate Gain/Loss per Receipt Line",BookRateGainPerIPRow); v = v + 16;
      end;
      if (HasPrepayments) then begin
        CheckBox(h2,v,0,"Use Prepayments, not On Account",DemandPPNo);  v = v + 16;    
        CheckBox(h2,v,0,"Force Unique Prepayment Numbers",ForceUniquePP); v = v + 16;       
      end;
      if (HasLocalization("PRT")==false) then begin
        CheckBox(h2,v,0,"Post Receipt #VAT#",IPBookVAT); v = v + 16;
      end;
    end else begin
      SetWRect(64,80,470,190);
      vs = 20; h = 150; f = 70; h2 = 300; v = 6;
      if (HasTaxMatrix) then begin
        EditField(h,v,f,"Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
      end else begin
        if (HasVATZone) then begin
          if (HasTaxMatrix) then begin
            EditField(h,v,50,"#Dom.# Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
            EditField(h,v+=vs,60,VATZoneEditFieldLabel_ENG(1) & "Tax Temp.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
            EditField(h,v+=vs,50,"Export Tax Temp.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
          end else begin
            EditField(h,v,30,"#Domestic# #VAT# Code",Normal,VATCodeDom,false,VATCodeSClass);
            EditField(h,v+=vs,30,VATZoneEditFieldLabel_ENG(1) & "#VAT# Code",Normal,VATCodeEU,false,VATCodeSClass);
            EditField(h,v+=vs,30,VATZoneEditFieldLabel_ENG(2) & "#VAT# Code",Normal,VATCodeExp,false,VATCodeSClass);
          end;
        end else begin
          EditField(h,v,f,"#VAT# Code",Normal,VATCodeDom,false,VATCodeSClass);
        end;
      end;
      v = v + 42; 
      ButtonFrame(h,v,120,2,"Base Price");
      RadioButton(h,v,0,0,"Not Including #VAT#",BasePriceInclVAT);
      RadioButton(h,v+=16,2,0,"Including #VAT#",BasePriceInclVAT);
      if (HasModIN) then begin
        CheckBox(h,v+=32,0,"Invoices Update #Stock#",InvUpdStock);
      end;
      if (HasModSL and HasLocalization("PRT")==false) then begin 
        CheckBox(h,v+=32,0,"Post Receipt #VAT#",IPBookVAT);
      end;  
    end;
  end;
  EndWindow;
end;