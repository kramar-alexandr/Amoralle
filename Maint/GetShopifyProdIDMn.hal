external inner function Boolean PasteCustInOrder(var record ORVc,string,string,var string,var string);
//external procedure DOLMakeWebRequest(string , string , area , var area );
external inner function string 50 TimeToString(time,string,boolean);
external inner procedure ExtractObj(string,var Integer,var string);
external inner function Boolean ORVc_PasteArtCode(var record ORVc,Integer,var string,var string,Boolean);
external inner procedure ExtractObj(string,var Integer,var string);
external inner procedure ORVc_PasteQuant(var record ORVc,Integer,Boolean,var Boolean);
external inner procedure ORVc_PastePrice(var record ORVc,Integer,var Boolean);
external inner procedure ORVc_PasteSum(var record ORVc,Integer,var Boolean);
external inner procedure ORDchsum(var record ORVc,Integer);
external inner procedure ORSumup(var record ORVc);

external inner procedure CUVc_PasteInvAddr(var record CUVc,Integer);//-
external inner function Boolean CUVc_PasteName(var record CUVc);//-
external inner procedure CUVc_PasteCountryCode(var record CUVc,string);//-
external function Boolean GetNextCustNr(var string);


global procedure DOLMakeWebRequest(string method,string apipath,var area areq,var area areply)
begin
  record DOLShopifyBlock DOLShopifyBl;
	area request;
	
	blockload(DOLShopifyBl);	
	
	addtexttoarea(method & " " & apipath & " HTTP/1.1" & chr(13) & chr(10),request);
 	addtexttoarea("host: " & DOLShopifyBl.ShopifyURL & chr(13) & chr(10),request);
	addtexttoarea("Authorization: Basic " & Base64Encode(DOLShopifyBl.APIUser & ":" & DOLShopifyBl.APIPass) & chr(13) & chr(10),request);
	addtexttoarea(chr(13) & chr(10),request);
	
	insertareabeforearea(request,areq);
		
	SendRawWebRequest(DOLShopifyBl.ShopifyURL,DOLShopifyBl.ShopifyPort,true,method,apipath,"application/json","",false,areq,areply,20);
	logtext(0,"************************DOLShopifyBl.SaveReqResp" & DOLShopifyBl.SaveReqResp);
	if(DOLShopifyBl.SaveReqResp>0)then begin
		if (!DirExists("ShopifyRQS")) then begin
			CreateFolder("ShopifyRQS");
		end;
		logtext(0,"Write***");
		WriteAreaToFile(areq,"ShopifyRQS/ShopifyRequest_" & DateToString(currentdate,"YYYY-MM-DD") & TimeToString(currenttime,"HHMMSS",false) & ".txt",0);
		WriteAreaToFile(areply,"ShopifyRQS/ShopifyReply_" & DateToString(currentdate,"YYYY-MM-DD") & TimeToString(currenttime,"HHMMSS",false) & ".txt",0);
	end;

return;
end;

global procedure DOLMakeWebRequestAsync(string method,string apipath,var area areq)
begin
  record DOLShopifyBlock DOLShopifyBl;
	area request,areply;
	
	blockload(DOLShopifyBl);
		
	
	//DOLShopifyBl.ShopifyURL = "z8farsqgafir.runscope.net";
	
 	addtexttoarea("Host: " & DOLShopifyBl.ShopifyURL & chr(13) & chr(10),request);
	addtexttoarea("Authorization: Basic " & Base64Encode(DOLShopifyBl.APIUser & ":" & DOLShopifyBl.APIPass) & chr(13) & chr(10),request);
	
	addtexttoarea(chr(13) & chr(10),request);
	
	insertareabeforearea(request,areq);
	
	SendAsyncRawWebRequest(DOLShopifyBl.ShopifyURL,DOLShopifyBl.ShopifyPort,true,method,apipath,"application/json","",areq,"DOLMakeWebRequestReply",20);
	if(DOLShopifyBl.SaveReqResp>0)then begin
		if (!DirExists("ShopifyRQS")) then begin
			CreateFolder("ShopifyRQS");
		end;
		WriteAreaToFile(areq,"ShopifyRQS/ShopifyRequest_" & DateToString(currentdate,"YYYY-MM-DD") & TimeToString(currenttime,"HHMMSS",false) & ".txt",0);
	end;

return;
end;

global updating procedure DOLMakeWebRequestReply(Area a_reply,Area a_replyheader,boolean timeout)
begin
	record DOLShopifyBlock DOLShopifyBl;
	
	blockload(DOLShopifyBl);
	if (!DirExists("ShopifyRQS")) then begin
		CreateFolder("ShopifyRQS");
	end;
	if(DOLShopifyBl.SaveReqResp>0)then begin
		if (!DirExists("ShopifyRQS")) then begin
			CreateFolder("ShopifyRQS");
		end;
		WriteAreaToFile(a_reply,"ShopifyRQS/ShopifyReply_" & DateToString(currentdate,"YYYY-MM-DD") & TimeToString(currenttime,"HHMMSS",false) & ".txt",0);
	end;	
return;
end;

global procedure DOLUpdShopifyStock(string items)
begin
	record DOLShopifyBlock DOLShopifyBl;
	area request,a_reply,atmp;
	record ItemStatusVc ISr;
	record INVc INr;
	string 50 curcm,rqs,lastsk,varstr,itcod;
	record LocationVc Locr;
	vector boolean locfl,invarb;
	vector val invarqty;
	boolean TrHs,inTrHs,testf;
	val qty;
	integer pos;
	array string 200 invar;
	integer arcnt,i,sqty;
	record ShopifyProductsVc SPr;
	longint cntesend;
	
	blockload(DOLShopifyBl);
	
	logtext(0,"DOLUpdShopifyStock");
	
	curcm = currentcompany & ";";
	rqs = right(items,len(items)-len(curcm));
	
	if(nonblank(items) and DOLShopifyBl.UpdStock==1)then begin
		if(nonblank(DOLShopifyBl.ShpifyLocId))then begin
			while(loopmain(Locr,1,true))begin
				if(setinset(DOLShopifyBl.StockClass,Locr.Classification))then begin
					locfl[Locr.Code] = true;
				end;
			end;
			
			if(nonblank(rqs))then begin
				if(rqs=="*")then begin
					INr.Code = "";	
				end else begin
					pos = 0;
					ExtractObj(rqs,pos,itcod);
					INr.Code = itcod;
					varstr = right(rqs,len(rqs) - len(itcod));
					if(varstr==itcod)then begin
						varstr = "";
					end;
				end;
				inTrHs = true;

				while(loopmain(INr,1,inTrHs))begin
					arcnt = 0;
					if(rqs!="*")then begin
						if(INr.Code!=itcod)then begin
							inTrHs = false;
						end;
					end;
					resetloop(ISr);
					ISr.Code = INr.Code;
					TrHs = inTrHs;
					qty = blankval;
					if(inTrHs)then begin
						while(loopmain(ISr,1,TrHs))begin
							testf = true;
							if(ISr.Code!=INr.Code)then begin TrHs = false; testf = false; end;
							if(nonblank(varstr) and varstr!=ISr.Variety)then begin testf = false; end;
							
							if(testf)then begin
								if(ISr.Location!=";;;")then begin							
									if(TrHs)then begin
										
										if(locfl[ISr.Location])then begin
											if(invarb[ISr.Code & ISr.Variety])then begin
												invarqty[ISr.Code & ISr.Variety] = invarqty[ISr.Code & ISr.Variety] + ISr.Instock;
											end else begin
												invar[arcnt] = ISr.Code & ISr.Variety;
												invarb[invar[arcnt]] = true;
												invarqty[invar[arcnt]] = ISr.Instock;
												arcnt = arcnt + 1;
											end;
										end;
									end;
								end;
							end;
						end;
						if(arcnt>0)then begin						
							For(i=0;i<arcnt;i=i+1) begin
								
								if(nonblank(invar[i]))then begin
									SPr.SKU = invar[i];
									setareazerosize(request);
									if(readfirstkey("SKU",SPr,1,true))then begin
										cntesend = cntesend + 1;
										sqty = invarqty[invar[i]];
										addtexttoarea("{\"location_id\":" & DOLShopifyBl.ShpifyLocId & "," & chr(13) & chr(10),request);
										addtexttoarea("\"inventory_item_id\":" & SPr.Vinvent_id & "," & chr(13) & chr(10),request);
										addtexttoarea("\"available\":" & sqty & "}" & chr(13) & chr(10),request);
										DOLMakeWebRequestAsync("POST","/admin/inventory_levels/set.json",request);
									end;
								end;
							end;
						end;
					end;
				end;			
			end;
		end;
	end;

return;
end;

procedure PreparePostArea(var area atarget) //Cut HTTP Header From raw reply
begin
	longint i,lenth;
	string 10 ch,unix,win,mac;
	area temparea;
	
	unix = chr(10) & chr(10);
	win = chr(13) & chr(10) & chr(13) & chr(10);
	mac = chr(13) & chr(13);
	
	lenth = GetAreaLength(atarget);
	For(i=0;i<lenth;i=i+1) begin
	  ch = GetStringfromarea(atarget,i,2);
	  if(ch==unix or ch==mac)then begin
	  	getareafromarea(atarget,i+2,lenth-i-2,temparea);
	  	i = lenth;
	  end else begin
			ch = GetStringfromarea(atarget,i,4);
			if(ch==win)then begin
				getareafromarea(atarget,i+4,lenth-i-4,temparea);
				i = lenth;
			end;
	  end;
	end; 
	
	setareazerosize(atarget);
	getareafromarea(temparea,0,getarealength(temparea),atarget);
	WriteAreaToFile(atarget,"ShopifyNrm.txt",0);
	
return;
end;

global
updating procedure DOLGetShopifyLocationsIDMn(record RcVc RepSpec)
begin
  record DOLShopifyBlock DOLShopifyBl;
  json jdata;
  boolean breakf;
  integer i,loopc,pg;
  string 255 data,since_id,pub_stat;
  val price;
  area a_req,a_reply;
  integer pos;
  record ShopifyLocVc SHLocr;

  BlockLoad(DOLShopifyBl);


	if (nonblank(DOLShopifyBl.APIUser) and nonblank(DOLShopifyBl.APIPass)) then begin
		DOLMakeWebRequest("GET","/admin/locations.json",a_req,a_reply);
		PreparePostArea(a_reply);
		jdata = ParseJSONArea(a_reply);
		
		i = 0;
		while (JSONNodeExists(jdata,"locations/[" & i & "]/id")) begin
			if (JSONNodeExists(jdata,"locations/[" & i & "]/id")) then begin
				data = JSONGet(jdata,"locations/[" & i & "]/id");
				SHLocr.Id = data;
				if(readfirstmain(SHLocr,1,true))then begin
					SHLocr.Name = JSONGet(jdata,"locations/[" & i & "]/name");
					SHLocr.address1 = JSONGet(jdata,"locations/[" & i & "]/address1");
					SHLocr.address2 = JSONGet(jdata,"locations/[" & i & "]/address2");
					SHLocr.city = JSONGet(jdata,"locations/[" & i & "]/city");
					recordstore(SHLocr,true);
				end else begin
					recordnew(SHLocr);
					SHLocr.Id = JSONGet(jdata,"locations/[" & i & "]/id");
					SHLocr.Name = JSONGet(jdata,"locations/[" & i & "]/name");
					SHLocr.address1 = JSONGet(jdata,"locations/[" & i & "]/address1");
					SHLocr.address2 = JSONGet(jdata,"locations/[" & i & "]/address2");
					SHLocr.city = JSONGet(jdata,"locations/[" & i & "]/city");
					recordstore(SHLocr,true);
				end;
				
			end;
			i = i + 1;
		end;

	end else begin
		MessageBox(0,"ERROR: API Access data must be provided. Check the Shopify settings.");
	end;


return;
end;


global
updating procedure DOLGetShopifyProdIDMn(record RcVc RepSpec)
begin
  record INVc INr,IN2r;
  record DOLShopifyBlock DOLShopifyBl;
  json jdata;
  boolean breakf;
  integer i,loopc,pg,j;
  string 255 data,since_id,pub_stat;
  val price;
  area a_req,a_reply;
  integer pos;
	record ShopifyProductsVc SPr;
	
  BlockLoad(DOLShopifyBl);

  pub_stat = "published";
  if (RepSpec.flags[0] == 1) then begin
    pub_stat = "any";
  end;
	SPr.Id = "";
		
  if (RepSpec.ArtMode == 0 or RepSpec.ArtMode == 2) then begin // EVS: DOL-167 artmode == 2
    if (nonblank(DOLShopifyBl.APIUser) and nonblank(DOLShopifyBl.APIPass)) then begin
      
      pg = 1;
      DOLMakeWebRequest("GET","/admin/products.json?fields=title,id,variants&limit=250&page=" & pg,a_req,a_reply);
     	PreparePostArea(a_reply);
      WriteAreaToFile(a_reply,"Shopify.txt",0);
			
      jdata = ParseJSONArea(a_reply);
			
      while (GetAreaLength(a_reply) > 0 and JSONNodeExists(jdata,"products/[0]/id") and loopc < 100) begin // 25000 items max; to avoid infinite loop
				logtext(0,"Begin to parse " & JSONNodeExists(jdata,"products/[" & i & "]/id"));
        i = 0;
        while (JSONNodeExists(jdata,"products/[" & i & "]/id")) begin
          if (JSONNodeExists(jdata,"products/[" & i & "]/variants/[0]/sku")) then begin
            data = JSONGet(jdata,"products/[" & i & "]/variants/[0]/sku");
            pos = 0;
            ExtractObj(data,pos,data);
            since_id = JSONGet(jdata,"products/[" & i & "]/id");
            /*INr.Code = data;
            if (ReadFirstMain(INr,1,true)) then begin
              if (RepSpec.ArtMode == 0) then begin
                data = JSONGet(jdata,"products/[" & i & "]/id");
                if (INr.ShopifyID != data and nonblank(data)) then begin
                  RecordCopy(IN2r,INr);
                  INr.ShopifyID = data;
                  logtext(0,"IN Update " & INr.Code);
                  RecordUpdate(IN2r,INr,false);
                end;
              end;
              if (RepSpec.ArtMode == 2) then begin
                data = JSONGet(jdata,"products/[" & i & "]/variants/[0]/price");
                price = StringToVal(data,M4Val);
                if (INr.ShopifyPrice != price and nonblank(data)) then begin
                  RecordCopy(IN2r,INr);
                  INr.ShopifyPrice = price;
                  logtext(0,"IN Update " & INr.Code);
                  RecordUpdate(IN2r,INr,false);
                end;
              end;
            end;*/
          
						j=0;
						while (JSONNodeExists(jdata,"products/[" & i & "]/variants/[" & j & "]/id")) begin
							recordnew(SPr);
							SPr.Id = JSONGet(jdata,"products/[" & i & "]/id");
							SPr.VariantId = JSONGet(jdata,"products/[" & i & "]/variants/[" & j & "]/id");
							SPr.Vproduct_id = JSONGet(jdata,"products/[" & i & "]/variants/[" & j & "]/product_id");
							SPr.Vinvent_id = JSONGet(jdata,"products/[" & i & "]/variants/[" & j & "]/inventory_item_id");
							SPr.Name = JSONGet(jdata,"products/[" & i & "]/title");
							SPr.VarName = JSONGet(jdata,"products/[" & i & "]/variants/[" & j & "]/option1");
							SPr.SKU = JSONGet(jdata,"products/[" & i & "]/variants/[" & j & "]/sku");
							if(nonblank(SPr.Id))then begin
								recordstore(SPr,true);
							end;
							j = j + 1;
						end;
          end;
          logtext(0,"i = " & i & " pg = " & pg);
          i = i + 1;
        end;

        SetAreaZeroSize(a_reply);

        pg = pg + 1;
        setareazerosize(a_reply);
        setareazerosize(a_req);
        DOLMakeWebRequest("GET","/admin/products.json?fields=title,id,variants&limit=250&page=" & pg,a_req,a_reply);
				PreparePostArea(a_reply);
        jdata = ParseJSONArea(a_reply);
        logtext(0,pg & " AreaSize " & getarealength(a_reply));
				logtext(0,pg & " AreaSizeNDExs " & JSONNodeExists(jdata,"products/[0]/id"));
        loopc = loopc + 1;
      end;

    end else begin
      MessageBox(0,"ERROR: API Access data must be provided. Check the Shopify settings.");
    end;
  end;
  if (RepSpec.ArtMode == 1) then begin
    while (LoopMain(INr,1,true)) begin
      RecordCopy(IN2r,INr);
      INr.ShopifyID = "";
      RecordUpdate(IN2r,INr,false);
    end;
  end;

return;
end;

global updating procedure CreateShopifyCustomer(json jdata,var record CUVc CUr,integer order)
begin
	record ShopifyNewCustBlock SNCb;
	string 255 acclang,tstr;
	record LetVc Letr;
	record CUVc lCUr;
	
	blockload(SNCb);
	
	if(nonblank(SNCb.CustCatDOM))then begin
		recordnew(CUr);	
		CUr.Name = JSONGet(jdata,"orders/[" & order & "]/customer/default_address/first_name");
		CUr.Name  = CUr.Name & " " & JSONGet(jdata,"orders/[" & order & "]/customer/default_address/last_name");
		CUVc_PasteName(CUr);
		CUr.InvAddr0 = JSONGet(jdata,"orders/[" & order & "]/customer/default_address/address1");//Street
		if(nonblank(CUr.InvAddr0))then begin
			CUVc_PasteInvAddr(CUr,0);
		end;
		CUr.InvAddr1 = JSONGet(jdata,"orders/[" & order & "]/customer/default_address/address2");//Street 2
		if(nonblank(CUr.InvAddr1))then begin
			CUVc_PasteInvAddr(CUr,1);
		end;
		CUr.InvAddr2 = JSONGet(jdata,"orders/[" & order & "]/customer/default_address/city");//City
		if(nonblank(CUr.InvAddr2))then begin
			CUVc_PasteInvAddr(CUr,2);
		end;
		CUr.InvAddr3 = JSONGet(jdata,"orders/[" & order & "]/customer/default_address/country");//Counrty
		if(nonblank(CUr.InvAddr3))then begin
			CUVc_PasteInvAddr(CUr,3);
		end;
		CUr.InvAddr4 = JSONGet(jdata,"orders/[" & order & "]/customer/default_address/zip");//ZIP
		if(nonblank(CUr.InvAddr4))then begin
			CUVc_PasteInvAddr(CUr,4);
		end;
		CUr.eMail = JSONGet(jdata,"orders/[" & order & "]/customer/email");
		CUr.Phone = JSONGet(jdata,"orders/[" & order & "]/customer/default_address/phone");
		CUr.CountryCode = JSONGet(jdata,"orders/[" & order & "]/customer/default_address/country_code");
		CUVc_PasteCountryCode(CUr,"");
		CUr.Comment = JSONGet(jdata,"orders/[" & order & "]/customer/default_address/company");
	
		switch(CUr.ExportFlag)begin
			case 0:CUr.CustCat = SNCb.CustCatDOM;
			case 1:CUr.CustCat = SNCb.CustCatEU;
			case 2:CUr.CustCat = SNCb.CustCatEXP;
			case 3:CUr.CustCat = SNCb.CustCatEU;
			case 4:CUr.CustCat = SNCb.CustCatEXP;
		end;
	
		acclang = JSONGet(jdata,"orders/[" & order & "]/client_details/accept_language");
		acclang = acclang & "," & JSONGet(jdata,"orders/[" & order & "]/customer_locale");
		AddToText(acclang,Letr);
	
		if(StringInText("en-us",Letr))then begin
			CUr.LangCode = "ENG";
		end;
		if(StringInText("en",Letr))then begin
			CUr.LangCode = "ENG";
		end;
		if(StringInText("lv",Letr))then begin
			CUr.LangCode = "LAT";
		end;
		if(StringInText("ru",Letr))then begin
			CUr.LangCode = "RUS";
		end;


		CUr.Classification = SNCb.Classification;
		CUR.VATNr = SNCb.VATNr;
		CUr.RegNr1 = SNCb.RegNr1;
		CUr.PayDeal = SNCb.PayDeal;
	
		CUr.CustType = 1;
		if(nonblank(CUr.Comment))then begin
			CUr.CustType = 0;
		end;
		
		if (blank(CUr.Code)) then begin
			if (GetNextCustNr(tstr)) then begin end;
			CUr.Code = tstr;
			lCUr.Code = CUr.Code;
			if (ReadFirstMain(lCUr,1,true)) then begin
				goto LCreateCU;
			end;
		end;
		
		recordstore(CUr,true);
	LCreateCU:;
		logtext(0,"CreateShopifyCustomer " & CUr.Code);
	end;
return;
end;

global
updating procedure DOLGetShopifyOrdersMn(record RcVc RepSpec)
begin
  record INVc INr,IN2r;
  record DOLShopifyBlock DOLShopifyBl;
  json jdata;
  boolean breakf;
  integer i,loopc,pg,linit,k;
  string 255 data,since_id,pub_stat;
  val price;
  area a_req,a_reply;
  record ORVc ORr;
	row ORVc ORrw;
	date crat,bdat;
	string 50 created_at;
	record CUVc CUr;
	string 255 warning,errstr,itemid,varid,sku;
	boolean chsum,custfound;
	
  BlockLoad(DOLShopifyBl);
  
  
  
  if (nonblank(DOLShopifyBl.APIUser) and nonblank(DOLShopifyBl.APIPass)) then begin
  	DOLMakeWebRequest("GET","/admin/orders.json?fields=name,email,created_at,line_items,customer,client_details,customer_locale&status=any&created_at_min=" & DateToString(RepSpec.sStartDate,"YYYY-MM-DD") & "T00:00:00-00:00" & "&created_at_max=" & DateToString(addday(RepSpec.sEndDate,1),"YYYY-MM-DD") & "T00:00:00-00:00",a_req,a_reply);
		PreparePostArea(a_reply);
		
		//addfiletoarea("Shopify.txt",a_reply,0);
		
		if(GetAreaLength(a_reply) > 0)then begin
			jdata = ParseJSONArea(a_reply);

			i = 0;
			while (JSONNodeExists(jdata,"orders/[" & i & "]/name")) begin
				
					data = JSONGet(jdata,"orders/[" & i & "]/name");
					
					if(nonblank(data))then begin
						ORr.CustOrdNr = data;
						if(readfirstkey("CustOrdNr",ORr,1,true)==false)then begin
							recordnew(ORr);
							crat = bdat;//blanked crat
							created_at = JSONGet(jdata,"orders/[" & i & "]/created_at");
							crat.year = stringtoint(left(created_at,4));
							crat.month = stringtoint(mid(created_at,5,2));
							crat.day = stringtoint(mid(created_at,8,2));
							ORr.OrdDate = crat;
							ORr.CustOrdNr = data;
							ORr.OrderClass = DOLShopifyBl.DefWebOrdClass;
							ORr.Location = DOLShopifyBl.DefWebLocation;
							ORr.CustCode = DOLShopifyBl.DefWebUserCode;
							
							custfound = false;
							CUr.eMail = JSONGet(jdata,"orders/[" & i & "]/customer/email");
							if(readfirstkey("eMail",CUr,1,true))then begin
								ORr.CustCode = CUr.Code;
								custfound = true;
							end else begin
								CUr.Name = JSONGet(jdata,"orders/[" & i & "]/customer/first_name") & " " & JSONGet(jdata,"orders/[" & i & "]/customer/last_name");;
								if(readfirstkey("Name",CUr,1,true))then begin
									ORr.CustCode = CUr.Code;
									custfound = true;
								end;
							end;
							
							if(custfound==false)then begin
								CreateShopifyCustomer(jdata,CUr,i);
								ORr.CustCode = CUr.Code;
							end;
							
							PasteCustInOrder(ORr,ORr.CustCode,"",warning,errstr);
							ORr.Addr0 = JSONGet(jdata,"orders/[" & i & "]/customer/first_name") & " " & JSONGet(jdata,"orders/[" & i & "]/customer/last_name");
							
							
							linit = 0;
							k = 0;
							while (JSONNodeExists(jdata,"orders/[" & i & "]/line_items/[" & linit & "]/id")) begin
								Clearrow(ORr,ORrw,1);
								itemid = JSONGet(jdata,"orders/[" & i & "]/line_items/[" & linit & "]/id");
								varid = JSONGet(jdata,"orders/[" & i & "]/line_items/[" & linit & "]/variant_id");
								sku = JSONGet(jdata,"orders/[" & i & "]/line_items/[" & linit & "]/sku");
								logtext(0,sku);
								ORrw.ArtCode = sku;
								matrowput(ORr,k,ORrw);
								ORVc_PasteArtCode(ORr,k,warning,warning,false)
								matrowget(ORr,k,ORrw);
								//ORrw.Spec = JSONGet(jdata,"orders/[" & i & "]/line_items/[" & linit & "]/title");
								ORrw.Price = evaltoval(JSONGet(jdata,"orders/[" & i & "]/line_items/[" & linit & "]/price"));
								ORrw.Quant = evaltoval(JSONGet(jdata,"orders/[" & i & "]/line_items/[" & linit & "]/quantity"));
								ORrw.Sum = ORrw.Price * ORrw.Quant;
								if(nonblank(ORrw.Spec))then begin
									matrowput(ORr,k,ORrw);
								end;
								ORVc_PasteQuant(ORr,k,true,chsum);
								ORDchsum(ORr,k);
								ORSumup(ORr);
								k = k + 1;
								linit = linit + 1;
							end;
							
							
							ORr.SerNr = NextSerNr("ORVc",ORr.OrdDate,-1,false,"");   
							recordstore(ORr,true);
						end;
					end;
					
				i = i + 1;
			end;
		end;
		
		WriteAreaToFile(a_reply,"Shopify.json",0);
  
  end;
  
  return;
end;


global updating procedure PeriodicWebTasks()
begin
	record RcVc RepSpec;
	time t;
	record DOLShopifyBlock DOLShopifyBl;
	longint ordiff,indiff;
	
	BlockLoad(DOLShopifyBl);
	
	logtext(0,"PeriodicWebTasks");
	
	ordiff = GetCurTick - DOLShopifyBl.LastTickOR;
	indiff = GetCurTick - DOLShopifyBl.LastTickIN;
	logtext(0,"***************PeriodicWebTasks GetCurTick " & GetCurTick);
	t = currenttime;
	if(DOLShopifyBl.GetOrdFrq>0)then begin
		if(ordiff<0 or (ordiff/1000)>DOLShopifyBl.GetOrdFrq*60)then begin
			DOLShopifyBl.LastTickOR = GetCurTick;
			blockstore(DOLShopifyBl);
			RepSpec.sStartDate = addday(currentdate,-7);
			RepSpec.sEndDate = currentdate;
			DOLGetShopifyOrdersMn(RepSpec);
			Logtext(0,"***************Periodic task DOLGetShopifyOrdersMn");
		end;
	end;
	if(DOLShopifyBl.UpdStockInertval>0)then begin
		if(indiff<0 or (indiff/1000)>DOLShopifyBl.UpdStockInertval*60)then begin
			DOLShopifyBl.LastTickIN = GetCurTick;
			blockstore(DOLShopifyBl);
			//DOLUpdShopifyStock(currentcompany & ";*");
			Logtext(0,"***************Periodic task DOLUpdShopifyStock");
		end;
	end;


	if(t.hour==23 and t.minute==0)then begin
		DOLGetShopifyLocationsIDMn(RepSpec);
	end;

	
return;
end;